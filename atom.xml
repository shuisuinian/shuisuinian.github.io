<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>wyf-Hexo</title>
  
  <subtitle>wyf&#39;s personal blog &lt;br&gt; wyf 的个人博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://shuisuinian.coding.me/"/>
  <updated>2019-07-15T06:22:31.963Z</updated>
  <id>https://shuisuinian.coding.me/</id>
  
  <author>
    <name>ShuiSui</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>oracle基础2</title>
    <link href="https://shuisuinian.coding.me/archives/3771320040.html"/>
    <id>https://shuisuinian.coding.me/archives/3771320040.html</id>
    <published>2019-07-10T11:53:01.000Z</published>
    <updated>2019-07-15T06:22:31.963Z</updated>
    
    <content type="html"><![CDATA[<h3 id="sql结构化查询语言"><a href="#sql结构化查询语言" class="headerlink" title="sql结构化查询语言"></a>sql结构化查询语言</h3><p>本文延续上一篇内容<a href="/archives/323323423.html">oracle基础</a></p><a id="more"></a><blockquote><p>本文用例中用到的表<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">-- emp表--员工信息表</span><br><span class="line">create table EMP</span><br><span class="line">(</span><br><span class="line">  empno    NUMBER(4) not null,</span><br><span class="line">  ename    VARCHAR2(10),</span><br><span class="line">  job      VARCHAR2(9),</span><br><span class="line">  mgr      NUMBER(4),</span><br><span class="line">  hiredate DATE,</span><br><span class="line">  sal      NUMBER(7,2),</span><br><span class="line">  comm     NUMBER(7,2),</span><br><span class="line">  deptno   NUMBER(2)</span><br><span class="line">)</span><br></pre></td></tr></table></figure></p></blockquote><ul><li><p>排序查询</p><p>降序</p><p><code>select * from 表名 order by 字段名 desc</code></p><p>升序</p><p><code>select * from 表名 order by 字段名 asc</code></p><blockquote><p>例1: 查询所有员工信息，按照工资从高到低排序</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from emp order by sal desc;</span><br></pre></td></tr></table></figure><blockquote><p>例2: 查询20部门中的员工信息，按工资从高到低，如果工资相等，再按奖金从低到高排序</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from emp where deptno = 10 order by sal desc,comm asc ;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>结果去重 distinct</p><p>未使用distinct</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select job from emp;</span><br></pre></td></tr></table></figure><blockquote><p>结果</p></blockquote><p><img src="https://i.loli.net/2019/07/10/5d25d74ccdca737780.png" alt></p><p>使用 distinct</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select distinct job from emp;</span><br></pre></td></tr></table></figure><blockquote><p>结果</p></blockquote><p><img src="https://i.loli.net/2019/07/10/5d25d74cdac1a57805.png" alt></p></li></ul><h3 id="数据库索引"><a href="#数据库索引" class="headerlink" title="数据库索引"></a>数据库索引</h3><blockquote><p>索引是一种额数的查询表，可以加快数据的检索</p><p>类似于书的目录，不需要查询整本数内容就可以找到想要的数据</p><p>缺点：减慢了数据的录入速度，同时增加了数据库的尺寸大小</p></blockquote><h4 id="oracle-常用的索引"><a href="#oracle-常用的索引" class="headerlink" title="oracle 常用的索引"></a>oracle 常用的索引</h4><ul><li>normal</li><li>unique 唯一索引<ul><li>适合建立在值不重复的字段上</li><li>主键默认就会建立一个唯一索引</li></ul></li><li>bitmap<ul><li>适合建立在只有某几个值的字段 （如性别字段）</li></ul></li></ul><h4 id="什么样的字段适合建立索引"><a href="#什么样的字段适合建立索引" class="headerlink" title="什么样的字段适合建立索引"></a>什么样的字段适合建立索引</h4><ol><li>经常被查询的字段</li><li>不为空且字段值不重复</li><li>字段的值不经常修改</li></ol><h4 id="创建索引的命令"><a href="#创建索引的命令" class="headerlink" title="创建索引的命令"></a>创建索引的命令</h4><p><code>create 索引类型 index 索引名 on 表名 (字段名);</code></p><blockquote><p>例:</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create unique index UK_USER_IDCARD on T_USER (IDCARD)</span><br></pre></td></tr></table></figure><h3 id="序列-Sequences"><a href="#序列-Sequences" class="headerlink" title="序列 Sequences"></a>序列 Sequences</h3><blockquote><p>是一种特殊的数据对象，一般用来自增</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">-- Create sequence </span><br><span class="line">create sequence seq_sno  --seq_sno是序列名</span><br><span class="line">minvalue 1  --最小值：下次循环开始的值</span><br><span class="line">maxvalue 9999999--最大值</span><br><span class="line">start with 1--初始值：第一次开始的值</span><br><span class="line">increment by 1--增量</span><br><span class="line">cache 20--缓存：</span><br><span class="line">cycle--循环：不写这一条，默认不循环</span><br><span class="line">order;--排序</span><br></pre></td></tr></table></figure><blockquote><p>使用</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">insert into 表名(id) values(seq_sno.nextval);</span><br></pre></td></tr></table></figure><h3 id="伪列rownum和rowid"><a href="#伪列rownum和rowid" class="headerlink" title="伪列rownum和rowid"></a>伪列rownum和rowid</h3><p>rowid和rownum都是序列，但含义完全不同</p><blockquote><p>rowid是物理地址，用于定位oracle中具体数据的物理存储位置，rownum则是sql的输出结果排序。通俗的讲：rowid是相对不变的，rownum会变化，尤其是使用order by的时候</p></blockquote><h4 id="rownum"><a href="#rownum" class="headerlink" title="rownum"></a>rownum</h4><p>表示查询某条记录在整个结果集中的位置，同一条记录查询条件不同对应的rownum是不同的而rowid是不会变的</p><ul><li>在oracle中，要按特定条件查询前n条记录，用rownum就可以了。<code>select * from emp where rownum&lt;3;</code></li><li>这里要注意的是不能对rownum用’’&gt;’’,也就是说如果用<code>select * from emp where rownum&gt;3;</code>查询的结果是失败的。<ul><li>原因:对应rownum来说它是oracle系统顺序分配为从查询返回的行的编号，返回的第一行分配的是1，第二行是2，以此内推，这个伪字段可以用于限制查询返回的总行数，<br>因为rownum都是从1开始，但是1以上的自然数在rownum做判断时认为都是false条件，所有无法查到rownum=n（n&gt;1的自然数）。</li></ul></li></ul><h4 id="rowid"><a href="#rowid" class="headerlink" title="rowid"></a>rowid</h4><p>同ROWNUM伪列不同的是，它是物理存在的，ROWID是一种数据类型，它使用基于64为编码的18个字符来唯一标识一条记录物理位置的一个ID，类似于Java中一个对象的哈希码，都是为了唯一标识对应对象的物理位置，需要注意的是ROWID虽然可以在表中进行查询，但是其值并未存储在表中，所以不支持增删改操作</p><p>ROWID由18个字符组成，组成结构如下：</p><table><thead><tr><th>数据对象编号</th><th>文件编号</th><th>块编号</th><th>行编号</th></tr></thead><tbody><tr><td>OOOOOO</td><td>FFF</td><td>BBBBBB</td><td>RRR</td></tr></tbody></table><blockquote><p>由于ROWID用来唯一标识表中数据的唯一性，所以可以利用这个特性去除重复</p></blockquote><h3 id="oracle-常见的系统函数"><a href="#oracle-常见的系统函数" class="headerlink" title="oracle 常见的系统函数"></a>oracle 常见的系统函数</h3><ul><li><p>sysdate 获取系统时间</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select sysdate from dual;</span><br></pre></td></tr></table></figure><p>结果:<img src="https://i.loli.net/2019/07/10/5d25d74ccdd5640653.png" alt></p></li><li><p>length 获取字符长度</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select length(&apos;abc中文&apos;) from dual;</span><br></pre></td></tr></table></figure><p>结果:<img src="https://i.loli.net/2019/07/10/5d25d74cca6e175431.png" alt></p></li><li><p>lengthb 获取字节数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select lengthb(&apos;abc中文&apos;) from dual;</span><br></pre></td></tr></table></figure><p>结果:<img src="https://i.loli.net/2019/07/10/5d25d74cd9bb664315.png" alt></p></li><li><p>upper 把字符转换为大写</p></li><li><p>lower  把字符转换为小写</p></li><li><p>substr 截取字符串</p><p><code>substr(str,offset,len)</code> 从offset位置开始截取冷儿字符</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select substr(&apos;abcdefg&apos;,1,4) from dual; --返回abcd</span><br></pre></td></tr></table></figure></li><li><p>instr  查找子字符串</p><p><code>instr(str,str2,pos,[times])</code> 从str的pos位置开始查找str2出现的位置，如果没找到，返回0，times是找第几次出现的位置</p></li><li><p>replace  子字符串替换</p><p><code>replace(str1,str2,str3)</code> 把str1中的所有str2替换成str3</p></li><li><p>trim 去除前后空格</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select trim(&apos;  abcd  &apos;) from dual;  --返回abcd</span><br></pre></td></tr></table></figure></li><li><p>to_number 把字符串转换为数字类型</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select to_number(&apos;12312312&apos;) from dual; --返回number类型 12312312</span><br></pre></td></tr></table></figure></li><li><p>to_char  把某些特殊数据转换为字符串</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">select to_char(sysdate,&apos;yyyy--MM-dd&apos;) from dual;</span><br><span class="line">-- 指定了日期显示按yyyy--MM-dd显示</span><br><span class="line">select to_char(sysdate,&apos;DDD&apos;) from dual;</span><br><span class="line">-- 返回指定日期是那一年的第几天</span><br><span class="line">select to_char(sysdate,&apos;DD&apos;) from dual;</span><br><span class="line">-- 返回指定日期是那一月的第几天</span><br><span class="line">select to_char(sysdate,&apos;D&apos;) from dual;</span><br><span class="line">-- 返回指定日期是那一周的第几天</span><br></pre></td></tr></table></figure></li><li><p>to_date  把字符串日期数据 转换为日期类型</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select to_date(&apos;2019-07-10 15:08:09&apos;,&apos;yyyy-MM-dd HH24:mi:ss&apos;) from dual;</span><br></pre></td></tr></table></figure><p>结果:        <img src="https://i.loli.net/2019/07/10/5d25d74d7332860019.png" alt></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-- 如果要添加的数据是 类似于birthday这种数据，则需要用到这个</span><br><span class="line">insert into t_user(id,birthday) values(11,to_date(&apos;2019-07-10 15:08:09&apos;,&apos;yyyy-MM-dd HH24:mi:ss&apos;));</span><br></pre></td></tr></table></figure></li><li><p>日期相关</p><ul><li><p>获取当前日期前4年的时间</p><p><code>select sysdate,sysdate-interval &#39;4&#39; year from dual;</code></p></li><li><p>获取当前日期前4月的时间</p><p><code>select sysdate,sysdate-interval &#39;4&#39; month from dual;</code></p></li><li><p>获取当前日期前4天的时间</p><p><code>select sysdate,sysdate-interval &#39;4&#39; day from dual;</code></p></li><li><p>获取当前日期前4小时的时间</p><p><code>select sysdate,sysdate-interval &#39;4&#39; hour from dual;</code></p></li><li><p>获取当前日期前4分钟的时间</p><p><code>select sysdate,sysdate-interval &#39;4&#39; minute from dual;</code></p></li><li><p>获取两个日期相差的月份</p><p><code>select months_between(sysdate,to_date(&#39;2019-02-10&#39;,&#39;yyyy-MM-dd&#39;)) from dual;</code></p></li><li><p>在一个日期的基础上加上或减去相应的月份，返回新的日期</p><p><code>select add_months(sysdate,5) from dual;</code></p></li><li><p>返回指定日期的当月的最后一天</p><p><code>select last_day(sysdate) from dual;</code></p></li></ul></li><li><p>nvl(a,b)  如果a=null ，返回b，否则返回a</p></li><li><p>nvl2(a,b,c)  如果a=null ，返回c，否则返回b</p></li><li><p>decode(a,值1,结果1,值2,结果2,值3,结果3,默认值)  根据a等于那个值，返回相应结果，否则返回默认值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select degree, decode (trunc(degree/10)*10,60,&apos;及格&apos;,70,&apos;良好&apos;,80,&apos;优秀&apos;,90,&apos;完美&apos;,&apos;继续努力&apos;) from t_score;</span><br></pre></td></tr></table></figure><p>结果:<img src="https://i.loli.net/2019/07/10/5d25d74d8e51657559.png" alt></p><p>类似实现方法 </p><p><code>case when</code>语句</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">select sal, </span><br><span class="line">       case</span><br><span class="line">         when sal&gt;3000 then &apos;高收入&apos;</span><br><span class="line">         when sal&gt;2000 then &apos;中收入&apos;</span><br><span class="line">           else &apos;低收入&apos;</span><br><span class="line">             end</span><br><span class="line">       收入水平，ename,job from emp;</span><br></pre></td></tr></table></figure><p>结果:<img src="https://i.loli.net/2019/07/10/5d25d74d9290271378.png" alt></p><p>或者用于 更新数据操作，例: 根据工作不同 加不同的工资</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">update emp set sal=</span><br><span class="line">case job</span><br><span class="line">  when &apos;CLERK&apos; then nvl(sal,0)+200</span><br><span class="line">    when &apos;SALESMAN&apos; then nvl(sal,0)+300</span><br><span class="line">      when &apos;PRESIDENT&apos; then nvl(sal,0)+400</span><br><span class="line">        when &apos;MANAGER&apos; then nvl(sal,0)+500</span><br><span class="line">          when &apos;ANALYST&apos; then nvl(sal,0)+600</span><br><span class="line">            end;</span><br></pre></td></tr></table></figure></li></ul><h3 id="聚合函数"><a href="#聚合函数" class="headerlink" title="聚合函数"></a>聚合函数</h3><ul><li>max()  最大值</li><li>min()  最小值</li><li>avg()  平均值</li><li>count()  求总记录数（不统计为null的记录总数）</li><li>sum()  求某个列的值加起来的总和</li></ul><h3 id="分组查询-group-by"><a href="#分组查询-group-by" class="headerlink" title="分组查询 group by"></a>分组查询 group by</h3><blockquote><p>一般和聚合函数结合使用</p></blockquote><blockquote><p>例1:求出每个部门的最高工资 最低工资 工资总和 平均工资 部门人数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt; --求出每个部门的最高工资 最低工资 工资总和 平均工资 部门人数</span><br><span class="line">&gt; select </span><br><span class="line">&gt;  deptno 部门编号, </span><br><span class="line">&gt;  max(sal) 最高工资,</span><br><span class="line">&gt;  min(sal) 最低工资,</span><br><span class="line">&gt;  sum(sal) 工资总和，</span><br><span class="line">&gt;  avg(sal) 平均工资,</span><br><span class="line">&gt;  count(*) 部门人数 </span><br><span class="line">&gt; from emp group by deptno;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt;</span><br><span class="line">&gt; 结果:</span><br><span class="line">&gt;</span><br><span class="line">&gt; ![](https://i.loli.net/2019/07/10/5d25d74d944eb86966.png)</span><br><span class="line">&gt; </span><br><span class="line">&gt; 例2: 查询员工数大于3的部门</span><br><span class="line">&gt;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><blockquote><p>–查询员工数大于等于2的部门<br>select<br> deptno 部门编号,<br> max(sal) 最高工资,<br> min(sal) 最低工资,<br> sum(sal) 工资总和，<br> avg(sal) 平均工资,<br> count(*) 部门人数<br>from emp group by deptno<br>having count(empno)&gt;3;<br>–group 后用 having 关键字<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&gt;</span><br><span class="line">&gt; 结果:</span><br><span class="line">&gt;</span><br><span class="line">&gt; ![](https://i.loli.net/2019/07/10/5d25d74d97f1550605.png)</span><br><span class="line"></span><br><span class="line">&gt; 例3:  行转列  </span><br><span class="line">&gt;</span><br><span class="line">&gt; 将图1 经过查询后  转化为图2所示结果</span><br><span class="line">&gt;</span><br><span class="line">&gt; 图1![](https://i.loli.net/2019/07/10/5d25d74e2aaab78736.png)</span><br><span class="line">&gt;</span><br><span class="line">&gt; 图2![](https://i.loli.net/2019/07/10/5d25d756b316876677.png)</span><br><span class="line">&gt;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>select A ,<br>sum(decode(B,’胜’,1)) 胜,<br>sum(decode(B,’负’,1)) 负<br>from t_sf group by A;<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">```</span><br></pre></td></tr></table></figure></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;sql结构化查询语言&quot;&gt;&lt;a href=&quot;#sql结构化查询语言&quot; class=&quot;headerlink&quot; title=&quot;sql结构化查询语言&quot;&gt;&lt;/a&gt;sql结构化查询语言&lt;/h3&gt;&lt;p&gt;本文延续上一篇内容&lt;a href=&quot;/archives/323323423.html&quot;&gt;oracle基础&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="个人笔记" scheme="https://shuisuinian.coding.me/categories/%E4%B8%AA%E4%BA%BA%E7%AC%94%E8%AE%B0/"/>
    
      <category term="jee学习之路" scheme="https://shuisuinian.coding.me/categories/%E4%B8%AA%E4%BA%BA%E7%AC%94%E8%AE%B0/jee%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF/"/>
    
      <category term="oracle" scheme="https://shuisuinian.coding.me/categories/%E4%B8%AA%E4%BA%BA%E7%AC%94%E8%AE%B0/jee%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF/oracle/"/>
    
    
      <category term="数据库" scheme="https://shuisuinian.coding.me/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="oracle" scheme="https://shuisuinian.coding.me/tags/oracle/"/>
    
      <category term="javase" scheme="https://shuisuinian.coding.me/tags/javase/"/>
    
  </entry>
  
  <entry>
    <title>oracle基础</title>
    <link href="https://shuisuinian.coding.me/archives/323323423.html"/>
    <id>https://shuisuinian.coding.me/archives/323323423.html</id>
    <published>2019-07-09T11:22:09.000Z</published>
    <updated>2019-07-15T06:22:44.119Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h1><blockquote><p>用来永久存储数据的一种c/s(client/server)软件系统</p></blockquote><h2 id="常用的关系型数据库"><a href="#常用的关系型数据库" class="headerlink" title="常用的关系型数据库"></a>常用的关系型数据库</h2><ul><li>mysql</li><li>oracle<ul><li>数据库量大-千万级</li></ul></li><li>db2<ul><li>数据库量大-千万级</li></ul></li><li>Microsoft sql server</li><li>sysbase<ul><li>数据库量大-千万级</li></ul></li></ul><a id="more"></a><blockquote><p>关系数据库是由表和一些其他对象组成的</p><p>数据库表：数据库表类似于java中的类</p></blockquote><blockquote><p>对于软件开发人员来说，数据库是每天都要接触的系统，我们主要用数据库来做以下事情</p></blockquote><ol><li>增删改表结构</li><li>增删改查数据</li><li>优化数据库</li><li>管理数据库</li></ol><hr><h2 id="oracle中常用的数据类型"><a href="#oracle中常用的数据类型" class="headerlink" title="oracle中常用的数据类型"></a>oracle中常用的数据类型</h2><ol><li><p>数字类型    number    </p><ul><li><p>number(5)        表示不超过5位整数</p></li><li><p>number(5,2)    小数后2位，整数部分最多3位，总长度不超过5位</p></li></ul></li><li><p>字符串类型</p><ol><li>可变长度的字符串类型<ul><li>varchar2    例如：varchar2(10)     10代表的是字节总数，英文字符占1个字节，中文占2个字节</li><li>nvarchar2  例如：nvarchar2(10)     10代表的是字符最大个数，每个字符占两个字节</li></ul></li><li>固定长度的字符串类型<ul><li>char    例如：char(10)     10代表的是字节总数，英文字符占1个字节，中文占2个字节，不管实际的字符数量，多出的空间以空格填充</li></ul></li></ol></li><li><p>日期类型</p><ol><li>date</li><li>timestamp时间戳类型:用1970-1-1日  开始计算的毫秒数</li></ol></li><li><p>大数据类型</p><ol><li>blob    存放任意格式文件的数据类型，一般用来存储图片</li><li>clob    存储大量的字符数据类型</li><li>nclob  存储大量的字符数据类型</li></ol></li></ol><hr><h2 id="oracle命令"><a href="#oracle命令" class="headerlink" title="oracle命令"></a>oracle命令</h2><h3 id="oracle用户相关命令"><a href="#oracle用户相关命令" class="headerlink" title="oracle用户相关命令"></a>oracle用户相关命令</h3><ol><li><p>创建用户的命令</p><ul><li>create user 用户名 identified by 密码;</li></ul></li><li><p>删除用户名及该用户名下的所有关联</p><ul><li>drop user 用户名 cascade;</li></ul></li><li><p>给用户赋予角色</p><ol><li><p>grant resource,connect to 用户名; </p><p>把resource 和 connect 角色赋予用户</p></li><li><p>resource 和 connect 是oracle中的两个角色名，这两个角色分别具有一定的权限</p><blockquote><p>举例：</p><p>在数据库中有以下操作</p></blockquote><ul><li>创建表</li><li>创建视图</li><li>连接登录数据库</li><li>创建存储过程</li></ul></li><li></li></ol></li><li><p>解锁账户（系统中默认 用户scott/tiger 默认是锁定的所以要解锁）</p><ul><li>alter user scott account unlock;</li></ul></li><li><p>重设密码</p><ul><li>alter user 用户名 identified by 1234</li></ul></li></ol><h3 id="oracle-表相关命令"><a href="#oracle-表相关命令" class="headerlink" title="oracle 表相关命令"></a>oracle 表相关命令</h3><ol><li>创建表</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">create table t_user</span><br><span class="line">(</span><br><span class="line">id number(5) not null constraint pk_user_id primary key,</span><br><span class="line">name nvarchar2(5),</span><br><span class="line">money number(5,2),</span><br><span class="line">gold number(18),</span><br><span class="line">birthday date default sysdate,</span><br><span class="line">sex char(2) default &apos;男&apos;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><ol start="2"><li>删除表</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drop table t_user;</span><br></pre></td></tr></table></figure><ol start="3"><li>修改表 添加主键的命令</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">alter table t_user</span><br><span class="line">      add constraint pk_user_id primary key (id)</span><br></pre></td></tr></table></figure><ol start="4"><li><p>添加外键的命令</p><ol><li><p>可以先添加一个用户登录记录表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">-- 创建一个用户登录记录表</span><br><span class="line">-- 用户id，登录时间，登录ip</span><br><span class="line">create table t_login_history</span><br><span class="line">(</span><br><span class="line">id number(5) not null,</span><br><span class="line">login_dt date default sysdate,</span><br><span class="line">login_ip varchar2(20)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>添加外键</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">alter table t_login_history</span><br><span class="line">      add constraint fk_login_id foreign key (id)</span><br><span class="line">      references t_user (id)</span><br></pre></td></tr></table></figure></li><li><p>添加表的同时赋予外键</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">create table t_login_history</span><br><span class="line">(</span><br><span class="line">id number(5) not null,</span><br><span class="line">login_dt date default sysdate,</span><br><span class="line">login_ip varchar2(20),</span><br><span class="line">constraint fk_login_id foreign key(id)</span><br><span class="line">      references t_user (id)</span><br><span class="line">)</span><br></pre></td></tr></table></figure></li></ol></li><li><p>增加字段的命令</p><p><code>alter table 表名 add 字段名 列的属性;</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table t_login_history add c1 number(5);</span><br></pre></td></tr></table></figure></li><li><p>修改字段的命令</p><p><code>alter table 表名 modify 字段名 列的属性;</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table t_login_history modify c2 nvarchar2(10);</span><br></pre></td></tr></table></figure></li><li><p>删除字段的命令</p><p><code>alter table 表名 drop column 字段名;</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table t_login_history drop column c1;</span><br></pre></td></tr></table></figure></li><li><p>清空表的数据</p><ol><li>truncate table 表名;    </li><li>delete table 表名;只清除表中的数据</li></ol></li></ol><hr><h3 id="数据完整性"><a href="#数据完整性" class="headerlink" title="数据完整性"></a>数据完整性</h3><p>为了实现数据完整性有以下手段:</p><ol><li><p>主键:能唯一标识某条记录的列，不能为null</p></li><li><p>外键:引用自别的表的主键，外键可以为null</p></li><li><p>not null</p></li><li><p>default</p></li><li><p>唯一约束 unique</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">alter table T_USER</span><br><span class="line">  add constraint uk_user_name unique (NAME);</span><br></pre></td></tr></table></figure></li><li><p>检测约束</p><p>字段&gt;值  and 字段&lt;值   （and是并且，or是或者）</p><blockquote><p>例1:添加sex 检查约束</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">alter table T_USER</span><br><span class="line">  add constraint check_user_sex</span><br><span class="line">  check (sex=&apos;男&apos; or sex=&apos;女&apos;);</span><br></pre></td></tr></table></figure><blockquote><p>例2:添加姓名长度的检查约束</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">alter table T_USER</span><br><span class="line">  add constraint CHECK_USER_NAME_LENGTH</span><br><span class="line">  check (length(name) &gt;=6 and length(name) &lt;=10);</span><br></pre></td></tr></table></figure></li></ol><hr><h2 id="sql结构化查询语言"><a href="#sql结构化查询语言" class="headerlink" title="sql结构化查询语言"></a>sql结构化查询语言</h2><ol><li><p>新增数据的sql语法</p><ol><li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">insert into 表名 values(值1,值2,...)</span><br><span class="line">--表中所有列都要对应赋值</span><br></pre></td></tr></table></figure></li><li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">insert into 表名(列名a,列名b) values(值1,值2);</span><br><span class="line">--可以选择要增加的列 分别 赋值</span><br></pre></td></tr></table></figure></li></ol></li><li><p>修改数据的sql语法</p><p><code>update 表名 set name=&#39;张三&#39;,ename=&#39;zhangsan&#39;;</code></p><ol><li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">update t_test </span><br><span class="line">set name=&apos;张三&apos;,ename=&apos;zhangsan&apos;;</span><br><span class="line">--表示 name和ename列 所有行的数据都修改</span><br></pre></td></tr></table></figure></li><li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">update t_test set name=&apos;鳄鱼&apos; where id = 1;</span><br><span class="line">--表示 将id=1的 数据的name改为 鳄鱼</span><br></pre></td></tr></table></figure></li></ol></li><li><p>删除数据的sql语法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">delete from 表名 where 条件</span><br><span class="line">-- 如果没有条件 则全部清空</span><br></pre></td></tr></table></figure></li><li><p>查询数据的sql语法</p><ol><li><p><code>select 字段列表 from 表名 [条件]</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select sno,sname from t_student;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select * from t_student;</span><br><span class="line">-- *号表示所有字段</span><br></pre></td></tr></table></figure></li><li><p><code>select 字段1 别名,字段2 别名 from 表名 别名 [条件]</code></p><p>给每个字段取了一个别名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select sno 学号,sname 姓名 from t_student 学生表;</span><br></pre></td></tr></table></figure></li><li><p>创建一个表并且复制查询到的数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create table 表名 as select * from 表名;</span><br></pre></td></tr></table></figure></li></ol><blockquote><p>一些例子</p></blockquote><p>学生表:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">create table t_student</span><br><span class="line">(</span><br><span class="line">sno varchar2(20) not null, --学号</span><br><span class="line">sname varchar2(20) not null,--学生姓名</span><br><span class="line">ssex varchar2(10) not null, --性别</span><br><span class="line">sbirthday date,     --生日</span><br><span class="line">class varchar2(20)  --所在班级编号</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>老师表:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">create table t_teacher </span><br><span class="line">(</span><br><span class="line">tno varchar2(10) not null,  --老师编号</span><br><span class="line">tname varchar2(20) not null,  --老师姓名</span><br><span class="line">tsex varchar2(20) not null,   --老师性别</span><br><span class="line">tbirthday date not null,  --生日</span><br><span class="line">prof varchar2(20),    --职称</span><br><span class="line">depart varchar2(20) not null  --部门</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>查询案例:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">-- 查询所有学生信息</span><br><span class="line">select * from t_student;</span><br><span class="line"></span><br><span class="line">-- 查询所有学生的学号，姓名</span><br><span class="line">select sno,sname from t_student;</span><br><span class="line"></span><br><span class="line">-- 查询所有的女老师</span><br><span class="line">select * from t_teacher where tsex = &apos;女&apos;;</span><br><span class="line"></span><br><span class="line">-- 查询所有职称等于助教的老师</span><br><span class="line">select * from t_teacher where prof=&apos;助教&apos;;</span><br><span class="line"></span><br><span class="line">-- 查询所有男助教</span><br><span class="line">select * from t_teacher where prof=&apos;助教&apos; and tsex = &apos;男&apos;;</span><br><span class="line"></span><br><span class="line">-- 查询所有男老师或职称等于讲师的老师信息，或者职称等于助教的老师</span><br><span class="line">select * from t_teacher where </span><br><span class="line">(tsex = &apos;男&apos; and prof = &apos;讲师&apos;) or prof = &apos;助教&apos;;</span><br><span class="line"></span><br><span class="line">-- 查询男或女教师</span><br><span class="line">select * from t_teacher where tsex=&apos;男&apos; or tsex=&apos;女&apos;;</span><br><span class="line">select * from t_teacher where tsex in (&apos;男&apos;,&apos;女&apos;);</span><br><span class="line"></span><br><span class="line">-- 查询emp表中 job=CLERK或SALESMAN的员工信息</span><br><span class="line">select * from emp where job=&apos;CLERK&apos; or job=&apos;SALESMAN&apos;;</span><br><span class="line">select * from emp where job in(&apos;CLERK&apos;,&apos;SALESMAN&apos;);</span><br><span class="line"></span><br><span class="line">-- 查询年龄等于10或者20或者30所有学生信息</span><br><span class="line">select * from t_student where </span><br><span class="line">trunc((sysdate-sbirthday)/365) in (10,20,30);</span><br><span class="line"></span><br><span class="line">-- 查询年龄在20到45岁之间的所有学生信息</span><br><span class="line">select * from t_student where</span><br><span class="line">trunc((sysdate-sbirthday)/365) between 20 and 45;</span><br><span class="line">-- trunc()是把一个小数取整的函数</span><br></pre></td></tr></table></figure></li></ol><ol start="5"><li><p>模糊查询</p><ol><li><p>like查询</p><p>通配符：%表示任意字符，_表示一个字符</p><p><code>select* from 表名 where 字段 like &#39;&#39;</code></p><blockquote><p>例子</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">--查询姓李的所有老师信息</span><br><span class="line">select * from t_teacher where tname like &apos;李%&apos;;</span><br><span class="line"></span><br><span class="line">--查询姓名中包含 诚 字的所有老师信息</span><br><span class="line">select * from t_teacher where tname like &apos;%诚%&apos;;</span><br><span class="line"></span><br><span class="line">--查询工作非SALESMAN，CLERK的员工信息</span><br><span class="line">select * from emp where job&lt;&gt;&apos;SALESMAN&apos;and job&lt;&gt;&apos;CLERK&apos;;</span><br><span class="line">select * from emp where job not in(&apos;SALESMAN&apos;,&apos;CLERK&apos;);</span><br></pre></td></tr></table></figure></li></ol></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;数据库&quot;&gt;&lt;a href=&quot;#数据库&quot; class=&quot;headerlink&quot; title=&quot;数据库&quot;&gt;&lt;/a&gt;数据库&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;用来永久存储数据的一种c/s(client/server)软件系统&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;常用的关系型数据库&quot;&gt;&lt;a href=&quot;#常用的关系型数据库&quot; class=&quot;headerlink&quot; title=&quot;常用的关系型数据库&quot;&gt;&lt;/a&gt;常用的关系型数据库&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;mysql&lt;/li&gt;
&lt;li&gt;oracle&lt;ul&gt;
&lt;li&gt;数据库量大-千万级&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;db2&lt;ul&gt;
&lt;li&gt;数据库量大-千万级&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Microsoft sql server&lt;/li&gt;
&lt;li&gt;sysbase&lt;ul&gt;
&lt;li&gt;数据库量大-千万级&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="个人笔记" scheme="https://shuisuinian.coding.me/categories/%E4%B8%AA%E4%BA%BA%E7%AC%94%E8%AE%B0/"/>
    
      <category term="jee学习之路" scheme="https://shuisuinian.coding.me/categories/%E4%B8%AA%E4%BA%BA%E7%AC%94%E8%AE%B0/jee%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF/"/>
    
      <category term="oracle" scheme="https://shuisuinian.coding.me/categories/%E4%B8%AA%E4%BA%BA%E7%AC%94%E8%AE%B0/jee%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF/oracle/"/>
    
    
      <category term="数据库" scheme="https://shuisuinian.coding.me/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="oracle" scheme="https://shuisuinian.coding.me/tags/oracle/"/>
    
      <category term="javase" scheme="https://shuisuinian.coding.me/tags/javase/"/>
    
  </entry>
  
  <entry>
    <title>线程</title>
    <link href="https://shuisuinian.coding.me/archives/368864908.html"/>
    <id>https://shuisuinian.coding.me/archives/368864908.html</id>
    <published>2019-06-29T02:59:43.000Z</published>
    <updated>2019-07-15T06:22:35.809Z</updated>
    
    <content type="html"><![CDATA[<h3 id="进程和线程"><a href="#进程和线程" class="headerlink" title="进程和线程"></a>进程和线程</h3><ul><li><p>进程</p><ul><li>一个应用程序的实例</li><li>是系统进行资源分配和调度的基本单位，是操作系统结构的基础。</li></ul></li><li><p>线程</p><ul><li>属于进程中的一个执行单元，线程是通过cpu执行的基本单元</li><li>一个进程中至少有一个主线程存在，主线程可以去申请子线程</li></ul></li></ul><a id="more"></a><blockquote><p>cpu执行任务是通过调用进程中的线程<br>一台电脑中 同时又很多个进程在运行状态<br>这些进程，又同时有很多个线程在运行状态<br>单核cpu 同一时间只能调用一个线程</p></blockquote><p>java中一个main方法一个进程，并且开启一个主线程，每个线程有个ID，在java中线程类是Thread类</p><blockquote><p>Thread.currentThread()获取当前线程运行实例对象<br>Thread.currentThread().getId()获取当前运行的线程ID</p></blockquote><h4 id="JVM启动时就启动了多个线程，至少有两个线程可以分析的出来"><a href="#JVM启动时就启动了多个线程，至少有两个线程可以分析的出来" class="headerlink" title="JVM启动时就启动了多个线程，至少有两个线程可以分析的出来"></a>JVM启动时就启动了多个线程，至少有两个线程可以分析的出来</h4><ol><li>执行main函数的线程<ul><li>该线程的任务代码都定义在main函数中</li></ul></li><li>负责垃圾回收的线程</li></ol><h3 id="线程的状态"><a href="#线程的状态" class="headerlink" title="线程的状态"></a>线程的状态</h3><ol><li>新建状态（New）：新创建了一个线程对象。</li><li>就绪状态（Runnable）：线程对象创建后，其他线程调用了该对象的start()方法。该状态的线程位于可运行线程池中，变得可运行，等待获取CPU的使用权。</li><li>运行状态（Running）：就绪状态的线程获取了CPU，执行程序代码。</li><li>阻塞状态（Blocked）：阻塞状态是线程因为某种原因放弃CPU使用权，暂时停止运行。直到线程进入就绪状态，才有机会转到运行状态。阻塞的情况分三种：<br>（一）、等待阻塞：运行的线程执行wait()方法，JVM会把该线程放入等待池中。(wait会释放持有的锁)<br>（二）、同步阻塞：运行的线程在获取对象的同步锁时，若该同步锁被别的线程占用，则JVM会把该线程放入锁池中。<br>（三）、其他阻塞：运行的线程执行sleep()或join()方法，或者发出了I/O请求时，JVM会把该线程置为阻塞状态。当sleep()状态超时、join()等待线程终止或者超时、或者I/O处理完毕时，线程重新转入就绪状态。（注意,sleep是不会释放持有的锁）</li><li>死亡状态（Dead）：线程执行完了或者因异常退出了run()方法，该线程结束生命周期。</li></ol><h3 id="创建线程的方法"><a href="#创建线程的方法" class="headerlink" title="创建线程的方法"></a>创建线程的方法</h3><p>在java中开启线程有3种方法：</p><ol><li>继承Thread类</li><li>实现Runnable接口</li><li>线程池(这里暂时先不写了)</li></ol><h6 id="创建线程方式一：继承Thread类"><a href="#创建线程方式一：继承Thread类" class="headerlink" title="创建线程方式一：继承Thread类"></a>创建线程方式一：继承Thread类</h6><ol><li>定义一个类继承Thread类</li><li>覆盖Thead类中的run方法<blockquote><blockquote><p>为什么要覆盖run方法？</p></blockquote><p>创建线程的目的是为了开启一条执行路径，去运行指定的代码和其他代码实现同时运行。<br>而运行的制定代码就是这个执行路径的任务，jvm创建的主线程的任务都定义在主函数中</p><blockquote><p>而自定义的线程它的任务在哪呢？</p></blockquote><p>Thread类用于描述线程，线程是需要任务的，所以Thread类也对任务的描述。<br>这个任务即使通过Thread类中的run方法来体现，也就是说，run方法就是封装自定义线程运行任务的函数</p><blockquote><p>run方法中定义就是线程要运行的任务代码</p></blockquote><p>开启线程是为了运行指定代码，所以只有继承Thread类，并覆盖run方法。将运行的代码定义在run方法中即可</p></blockquote></li><li>直接创建Thread的子类对象，并启动 object.start();</li></ol><h6 id="创建线程方式二：通过接口的形式完成-Runnable的实现"><a href="#创建线程方式二：通过接口的形式完成-Runnable的实现" class="headerlink" title="创建线程方式二：通过接口的形式完成 Runnable的实现"></a>创建线程方式二：通过接口的形式完成 Runnable的实现</h6><ol><li>定义类实现 implements Runnable</li><li>覆盖接口中的run 方法，将线程的任务代码封装到run方法中</li><li>通过Thread类创建线程对象，并将Runnable接口的子类对象最为Thread类的构造函数的参数进行传递     Thread t1 = new Thread(d);</li><li>调用线程对象的start方法开启线程 t1.start();</li></ol><h4 id="线程中常用方法"><a href="#线程中常用方法" class="headerlink" title="线程中常用方法"></a>线程中常用方法</h4><ul><li><p>Thread.yield( )</p><ul><li>Java线程中的Thread.yield( )方法，译为线程让步。顾名思义，就是说当一个线程使用了这个方法之后，它就会把自己CPU执行的时间让掉，让自己或者其它的线程运行，注意是让自己或者其他线程运行，并不是单纯的让给其他线程。</li><li>yield()的作用是让步。它能让当前线程由“运行状态”进入到“就绪状态”，从而让其它具有相同优先级的等待线程获取执行权；但是，并不能保证在当前线程调用yield()之后，其它具有相同优先级的线程就一定能获得执行权；也有可能是当前线程又进入到“运行状态”继续运行！</li></ul></li><li><p>synchronized</p><ul><li>synchronized加在方法前面就是方法锁,作用是保证同一时间只能有一个线程进入该方法执行</li><li>synchronized作用于对象 就是对象锁<ul><li>对象锁是实例方法使用synchronized关键字后，如果是多个线程访问同个对象的sychronized块，是同步的，但是访问不同对象的话还是不同步的。</li></ul></li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">User user = new User();</span><br><span class="line">synchronized(user)&#123;</span><br><span class="line">    while(...)&#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">    user.notify() 唤醒其中一个等待操作对象(wait)的线程</span><br><span class="line">    user.wait(); //当前线程睡眠 释放对象锁</span><br><span class="line">    //当前线程睡眠，直到被别人用notify或notifyAll唤醒该线程</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Object.wait()当前线程睡眠 释放对象锁<br>Object.notify() 随机唤醒其中一个wait的线程<br>Object.notifyAll() 唤醒所有wait中的线程<br>Thread.sleep(20000); 睡眠</p></blockquote><blockquote><blockquote><p>wait和sleep的区别：<br>wait是object类的方法，sleep是Thread类的方法<br>2个方法都可以让线程暂停运行<br>但是wait会释放对象锁，sleep不会。</p></blockquote></blockquote><ul><li><p>中断：<br>   中断在java中主要有3个方法：interrupt(),sInterrupted()和interrupted()。</p><ul><li>interrupt()，在一个线程中调用另一个线程的interrupt()方法，即会向那个线程发出信号——线程中断状态已被设置。至于那个线程何去何从，由具体的代码实现决定。</li><li>isInterrupted()，用来判断当前线程的中断状态(true or false)。</li><li>interrupted()是个Thread的static方法，用来恢复中断状态。</li></ul></li><li><p>Thread. join();</p><ul><li>join的意思是使得放弃当前线程的执行，并返回对应的线程</li><li>例如下面代码的意思就是：<br>程序在main线程中调用t1线程的join方法，则main线程放弃cpu控制权，并返回t1线程继续执行直到线程t1执行完毕<br>所以结果是t1线程执行完后，才到主线程执行，相当于在main线程中同步t1线程，t1执行完了，main线程才有执行的机会</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ThreadJoinTest t1 = new ThreadJoinTest(&quot;小明&quot;);</span><br><span class="line">ThreadJoinTest t2 = new ThreadJoinTest(&quot;小东&quot;);</span><br><span class="line">t1.start();</span><br><span class="line">t1.join();</span><br><span class="line">t2.start();</span><br></pre></td></tr></table></figure><blockquote><p>就这样吧</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;进程和线程&quot;&gt;&lt;a href=&quot;#进程和线程&quot; class=&quot;headerlink&quot; title=&quot;进程和线程&quot;&gt;&lt;/a&gt;进程和线程&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;进程&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一个应用程序的实例&lt;/li&gt;
&lt;li&gt;是系统进行资源分配和调度的基本单位，是操作系统结构的基础。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;线程&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;属于进程中的一个执行单元，线程是通过cpu执行的基本单元&lt;/li&gt;
&lt;li&gt;一个进程中至少有一个主线程存在，主线程可以去申请子线程&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="个人笔记" scheme="https://shuisuinian.coding.me/categories/%E4%B8%AA%E4%BA%BA%E7%AC%94%E8%AE%B0/"/>
    
      <category term="jee学习之路" scheme="https://shuisuinian.coding.me/categories/%E4%B8%AA%E4%BA%BA%E7%AC%94%E8%AE%B0/jee%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF/"/>
    
      <category term="javase" scheme="https://shuisuinian.coding.me/categories/%E4%B8%AA%E4%BA%BA%E7%AC%94%E8%AE%B0/jee%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF/javase/"/>
    
    
      <category term="javase" scheme="https://shuisuinian.coding.me/tags/javase/"/>
    
      <category term="线程" scheme="https://shuisuinian.coding.me/tags/%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>集合框架</title>
    <link href="https://shuisuinian.coding.me/archives/2128322273.html"/>
    <id>https://shuisuinian.coding.me/archives/2128322273.html</id>
    <published>2019-06-29T02:56:32.000Z</published>
    <updated>2019-07-15T06:22:49.586Z</updated>
    
    <content type="html"><![CDATA[<h1 id="java集合框架"><a href="#java集合框架" class="headerlink" title="java集合框架"></a>java集合框架</h1><ul><li><p>从物理角度只有两种数据结构</p><ol><li>连续存储</li><li>链式存储<a id="more"></a></li></ol></li><li><p>从逻辑角度有很多种数据结构</p><ol><li>顺序存储</li><li>链式存储</li><li>map</li><li>红黑树</li><li>…</li></ol></li></ul><ul><li>集合框架被设计成要满足以下几个目标。<ul><li>该框架必须是高性能的。基本集合（动态数组，链表，树，哈希表）的实现也必须是高效的。</li><li>该框架允许不同类型的集合，以类似的方式工作，具有高度的互操作性。</li><li>对一个集合的扩展和适应必须是简单的。</li></ul></li></ul><p>为此，整个集合框架就围绕一组标准接口而设计。你可以直接使用这些接口的标准实现，诸如： LinkedList, HashSet, 和 TreeSet 等,除此之外你也可以通过这些接口实现自己的集合。</p><blockquote><p>以下内容，参考来自<a href="https://www.cnblogs.com/xiohao/p/4309462.htm" target="_blank" rel="noopener">大佬</a></p></blockquote><h2 id="Collection"><a href="#Collection" class="headerlink" title="Collection"></a>Collection</h2><blockquote><p>Collection 是最基本的集合接口</p></blockquote><h3 id="List"><a href="#List" class="headerlink" title="List"></a>List</h3><blockquote><p>List接口是一个有序的 Collection<br>使用此接口能够精确的控制每个元素插入的位置，能够通过索引(元素在List中位置，类似于数组的下标)来访问List中的元素<br>第一个元素的索引为 0，而且允许有相同的元素。<br>List 接口存储一组不唯一，有序（插入顺序）的对象。</p></blockquote><p>List接口又有两个常用的实现类ArrayList和LinkedList</p><hr><ul><li>ArrayList</li></ul><blockquote><p>ArrayList -&gt; List接口 -&gt; Collection接口<br>ArrayList 底层就是数组</p></blockquote><blockquote><p>ArrayList数组线性表的特点为:类似数组的形式进行存储，因此它的随机访问速度极快。<br>ArrayList数组线性表的缺点为:不适合于在线性表中间需要频繁进行插入和删除操作。因为每次插入和删除都需要移动数组中的元素。</p></blockquote><ol><li>如果在初始化ArrayList的时候没有指定初始化长度的话，默认的长度为10</li><li>ArrayList在增加新元素的时候如果超过了原始的容量的话，ArrayList扩容ensureCapacity的方案为<code>原始容量*3/2</code></li><li><p>ArrayList是线程不安全的，在多线程的情况下不要使用</p><blockquote><p>如果一定在多线程使用List的，您可以使用Vector，因为Vector和ArrayList基本一致，区别在于Vector中的绝大部分方法都          使用了同步关键字修饰，这样在多线程的情况下不会出现并发错误哦，还有就是它们的扩容方案不同，ArrayList是通过<code>原始容量*3/2</code>,而Vector是允许设置默认的增长长度，Vector的默认扩容方式为原来的2倍。         切记Vector是ArrayList的多线程的一个替代品</p></blockquote></li></ol><ol start="4"><li>ArrayList实现遍历的几种方法</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">package com.yonyou.test;</span><br><span class="line"> </span><br><span class="line">import java.util.ArrayList;</span><br><span class="line">import java.util.Iterator;</span><br><span class="line">import java.util.List;</span><br><span class="line"> </span><br><span class="line">public class Test&#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">     List&lt;String&gt; list=new ArrayList&lt;String&gt;();</span><br><span class="line">     list.add(&quot;Hello&quot;);</span><br><span class="line">     list.add(&quot;World&quot;);</span><br><span class="line">     list.add(&quot;HAHAHAHA&quot;);</span><br><span class="line">     //第一种遍历方法使用foreach遍历List</span><br><span class="line">     for (String str : list) &#123;</span><br><span class="line">        System.out.println(str);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">     //第二种遍历，把链表变为数组相关的内容进行遍历</span><br><span class="line">    String[] strArray=new String[list.size()];</span><br><span class="line">    list.toArray(strArray);</span><br><span class="line">    for(int i=0;i&lt;strArray.length;i++) </span><br><span class="line">    //这里也可以改写为foreach(String str:strArray)这种形式</span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(strArray[i]);</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    //第三种遍历 使用迭代器进行相关遍历</span><br><span class="line">     </span><br><span class="line">     Iterator&lt;String&gt; ite=list.iterator();</span><br><span class="line">     while(ite.hasNext())</span><br><span class="line">     &#123;</span><br><span class="line">         System.out.println(ite.next());</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><ul><li>LinkedList<blockquote><p>LinkedList -&gt; List接口 -&gt; Collection接口<br>LinkedListt 底层是双向链表</p></blockquote></li></ul><blockquote><p>LinkedList的链式线性表的特点为: 适合于在链表中间需要频繁进行插入和删除操作。<br>LinkedList的链式线性表的缺点为: 随机访问速度较慢。查找一个元素需要从头开始一个一个的找。</p></blockquote><ol><li>LinkedList的内部实现<ul><li>LinkedList的内部是基于双向循环链表的结构来实现的。在LinkedList中有一个类似于c语言中结构体的Entry内部类。在Entry的内部类中包含了前一个元素的地址引用和后一个元素的地址引用类似于c语言中指针。     <ol start="2"><li>LinkedList不是线程安全的</li></ol></li><li>注意LinkedList和ArrayList一样也不是线程安全的，如果在对线程下面访问可以自己重写LinkedLis</li><li>,然后在需要同步的方法上面加上同步关键字synchronized     <ol start="3"><li>d.LinkedList的遍历方法</li></ol></li></ul></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">package com.yonyou.test;</span><br><span class="line"> </span><br><span class="line">import java.util.LinkedList;</span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">public class Test&#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">     </span><br><span class="line">    List&lt;String&gt; list=new LinkedList&lt;String&gt;();</span><br><span class="line">    list.add(&quot;Hello&quot;);</span><br><span class="line">    list.add(&quot;World&quot;);</span><br><span class="line">    //LinkedList遍历的第一种方式使用数组的方式</span><br><span class="line">    String[] strArray=new String[list.size()];</span><br><span class="line">    list.toArray(strArray);</span><br><span class="line">    for(String str:strArray)</span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(str);</span><br><span class="line">    &#125;</span><br><span class="line">    //LinkedList遍历的第二种方式</span><br><span class="line">    for(String str:list)</span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(str);   </span><br><span class="line">    &#125;</span><br><span class="line">    //LinkedList遍历的第三种方式（迭代器）</span><br><span class="line">    Iterator&lt;String&gt; ite = list.iterator();</span><br><span class="line">    while (ite.hasNext()) &#123;</span><br><span class="line">        System.out.println(ite.next());</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>LinkedList可以被当做堆栈来使用<ul><li>由于LinkedList实现了接口Dueue，所以LinkedList可以被当做堆栈来使用</li></ul></li></ol><hr><h3 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h3><blockquote><p>Set 具有与 Collection 完全一样的接口，只是行为上不同<br>Set 不保存重复的元素。Set 接口存储一组唯一，无序的对象</p></blockquote><blockquote><p>Set接口区别于List接口的特点在于:   Set中的元素实现了不重复，有点象集合的概念，无序，不允许有重复的元素,最多允许有一个null元素对象<br>需要注意的是:虽然Set中元素没有顺序，但是元素在set中的位置是有由该元素的HashCode决定的，其具体位置其实是固定的。</p></blockquote><ul><li>此外需要说明一点，在set接口中的不重复是由特殊要求的。    举一个例子:对象A和对象B，本来是不同的两个对象，正常情况下它们是能够放入到Set里面的，但是    如果对象A和B的都重写了hashcode和equals方法，并且重写后的hashcode和equals方法是相同的话。那么A和B是不能同时放入到    Set集合中去的，也就是Set集合中的去重和hashcode与equals方法直接相关</li></ul><h4 id="HashSet"><a href="#HashSet" class="headerlink" title="HashSet"></a>HashSet</h4><blockquote><p>HashSet的底层就是基于HashMap来实现的<br>在HashMap中的key是不允许重复的，你换个角度看看，那不就是说Set集合吗？   这里唯一一个需要处理的就是那个Map的value弄成一个固定值即可</p></blockquote><ul><li>HashSet使用和理解中容易出现的误区:<ol><li>HashSet中存放null值<br> HashSet中时允许出入null值的，但是在HashSet中仅仅能够存入一个null值</li><li>HashSet中存储元素的位置是固定的<br> HashSet中存储的元素的是无序的，但是由于HashSet底层是基于Hash算法实现的，使用了hashcode，所以HashSet中相应的元素的位置是固定的</li><li>遍历HashSet的几种方法<br> 这里先不写了，和上面给的方法类似</li></ol></li></ul><h4 id="TreeSet"><a href="#TreeSet" class="headerlink" title="TreeSet"></a>TreeSet</h4><blockquote><p>TreeSet是一种排序二叉树。存入Set集合中的值，会按照值的大小进行相关的排序操作。底层算法是基于红黑树来实现的。<br>TreeSet和HashSet的主要区别在于TreeSet中的元素会按照相关的值进行排序</p></blockquote><ul><li>TreeSet和HashSet的区别和联系<ol><li>HashSet是通过HashMap实现的,TreeSet是通过TreeMap实现的,只不过Set用的只是Map的key</li><li>Map的key和Set都有一个共同的特性就是集合的唯一性.TreeMap更是多了一个排序的功能.</li><li>hashCode和equal()是HashMap用的, 因为无需排序所以只需要关注定位和唯一性即可.<ul><li>hashCode是用来计算hash值的,hash值是用来确定hash表索引的.</li><li>hash表中的一个索引处存放的是一张链表, 所以还要通过equal方法循环比较链上的每一个对象才可以真正定位到键值对应的Entry.</li><li>put时,如果hash表中没定位到,就在链表前加一个Entry,如果定位到了,则更换Entry中的value,并返回旧value<ol start="4"><li>由于TreeMap需要排序,所以需要一个Comparator为键值进行大小比较.当然也是用Comparator定位的.</li></ol><ul><li>Comparator可以在创建TreeMap时指定</li><li>如果创建时没有确定,那么就会使用key.compareTo()方法,这就要求key必须实现Comparable接口.</li><li>TreeMap是使用Tree数据结构实现的,所以使用compare接口就可以完成定位了.</li></ul></li></ul></li></ol></li></ul><blockquote><p>下面是一个使用TreeSet的实例</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">package com.yonyou.test;</span><br><span class="line"> </span><br><span class="line">import java.util.Iterator;</span><br><span class="line">import java.util.TreeSet;</span><br><span class="line"></span><br><span class="line">public class Test&#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        //String实体类中实现Comparable接口，所以在初始化TreeSet的时候，</span><br><span class="line">        //无需传入比较器</span><br><span class="line">        TreeSet&lt;String&gt; treeSet=new TreeSet&lt;String&gt;();</span><br><span class="line">        treeSet.add(&quot;d&quot;);</span><br><span class="line">        treeSet.add(&quot;c&quot;);</span><br><span class="line">        treeSet.add(&quot;b&quot;);</span><br><span class="line">        treeSet.add(&quot;a&quot;);</span><br><span class="line">        Iterator&lt;String&gt; iterator=treeSet.iterator();</span><br><span class="line">        while(iterator.hasNext())</span><br><span class="line">        &#123;</span><br><span class="line">            System.out.println(iterator.next());</span><br><span class="line">        &#125;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h3><blockquote><p>Map中的每个成员方法由一个关键字（key）和一个值（value）构成。<br>Map包装的是一组成对的“键-值”对象的集合，而且在Map接口的集合中也不能有重复的key出现，因为每个键只能与一个成员元素相对应。<br>Map接口不直接继承于Collection接口（需要注意）</p></blockquote><h4 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h4><blockquote><p>HashMap实现了Map、CloneMap、Serializable三个接口，并且继承自AbstractMap类。<br>HashMap基于hash数组实现，若key的hash值相同则使用链表方式进行保存。</p></blockquote><ul><li>新建一个HashMap时,默认的话会初始化一个大小为16，负载因子为0.75的空的HashMap</li><li><p>HashMap中还存在一个内部类Entry，用于链表的存储</p><blockquote><p>Entry是一个结点，它持有下一个元素的引用，这样就构成了一个链表</p></blockquote></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">import java.util.*;</span><br><span class="line"></span><br><span class="line">public class Test&#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Map&lt;String, String&gt; map = new HashMap&lt;String, String&gt;();</span><br><span class="line">        map.put(&quot;1&quot;, &quot;value1&quot;);</span><br><span class="line">        map.put(&quot;2&quot;, &quot;value2&quot;);</span><br><span class="line">        map.put(&quot;3&quot;, &quot;value3&quot;);</span><br><span class="line">        </span><br><span class="line">        //第一种：普遍使用，二次取值</span><br><span class="line">        System.out.println(&quot;通过Map.keySet遍历key和value：&quot;);</span><br><span class="line">        for (String key : map.keySet()) &#123;</span><br><span class="line">            System.out.println(&quot;key= &quot;+ key + &quot; and value= &quot; + map.get(key));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        //第二种</span><br><span class="line">        System.out.println(&quot;通过Map.entrySet使用iterator遍历key和value：&quot;);</span><br><span class="line">        Iterator&lt;Map.Entry&lt;String, String&gt;&gt; it = map.entrySet().iterator();</span><br><span class="line">        while (it.hasNext()) &#123;</span><br><span class="line">            Map.Entry&lt;String, String&gt; entry = it.next();</span><br><span class="line">            System.out.println(&quot;key= &quot; + entry.getKey() + &quot; and value= &quot; + entry.getValue());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        //第三种：推荐，尤其是容量大时</span><br><span class="line">        System.out.println(&quot;通过Map.entrySet遍历key和value&quot;);</span><br><span class="line">        for (Map.Entry&lt;String, String&gt; entry : map.entrySet()) &#123;</span><br><span class="line">            System.out.println(&quot;key= &quot; + entry.getKey() + &quot; and value= &quot; + entry.getValue());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        //第四种</span><br><span class="line">        System.out.println(&quot;通过Map.values()遍历所有的value，但不能遍历key&quot;);</span><br><span class="line">        for (String v : map.values()) &#123;</span><br><span class="line">            System.out.println(&quot;value= &quot; + v);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>好久没有弄，暂时就这些了</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;java集合框架&quot;&gt;&lt;a href=&quot;#java集合框架&quot; class=&quot;headerlink&quot; title=&quot;java集合框架&quot;&gt;&lt;/a&gt;java集合框架&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;从物理角度只有两种数据结构&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;连续存储&lt;/li&gt;
&lt;li&gt;链式存储
    
    </summary>
    
      <category term="个人笔记" scheme="https://shuisuinian.coding.me/categories/%E4%B8%AA%E4%BA%BA%E7%AC%94%E8%AE%B0/"/>
    
      <category term="jee学习之路" scheme="https://shuisuinian.coding.me/categories/%E4%B8%AA%E4%BA%BA%E7%AC%94%E8%AE%B0/jee%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF/"/>
    
      <category term="javase" scheme="https://shuisuinian.coding.me/categories/%E4%B8%AA%E4%BA%BA%E7%AC%94%E8%AE%B0/jee%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF/javase/"/>
    
    
      <category term="javase" scheme="https://shuisuinian.coding.me/tags/javase/"/>
    
      <category term="数据结构" scheme="https://shuisuinian.coding.me/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="集合框架" scheme="https://shuisuinian.coding.me/tags/%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>字符串</title>
    <link href="https://shuisuinian.coding.me/archives/4236377085.html"/>
    <id>https://shuisuinian.coding.me/archives/4236377085.html</id>
    <published>2019-06-12T12:34:11.000Z</published>
    <updated>2019-07-15T06:20:46.994Z</updated>
    
    <content type="html"><![CDATA[<h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><h4 id="比较"><a href="#比较" class="headerlink" title="比较"></a>比较</h4><ul><li>如果是2个基本类型比较，是比较值是否相等</li><li>如果是2个引用类型比较，比较的是引用类型指向的内存地址</li></ul><h5 id="String-s1-”hello”与String-s2-new-String-“hello”-的区别："><a href="#String-s1-”hello”与String-s2-new-String-“hello”-的区别：" class="headerlink" title="String s1=”hello”与String s2=new String(“hello”)的区别："></a>String s1=”hello”与String s2=new String(“hello”)的区别：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">* new的对象是在堆中存储，并且每new一次就单独申请一块新的内存</span><br><span class="line">* 常量字符串在常量池(特殊的内存区域)</span><br></pre></td></tr></table></figure><a id="more"></a><blockquote><p>String类在内存中管理一个字符串常量池（常量池的一部分），池中所有相同的字符串常量被合并，只占用一个空间。<br>String s1=”hello”，先看池中有没有hello，没有就创建一个hello字符串对象。即采用此方法创建0或者1个对象。<br>String s2=new String(“hello”),这里先在池中创建一个hello对象，同s1，然后new String()时，将hello对象复制到堆heap中，s2指向堆中的hello。采用此种方法时创建1或2个对象(当池中有hello时，创建一个对象)。</p></blockquote><p><img src="https://i.loli.net/2019/06/12/5d00f23744e8655027.png" alt><br><img src="https://i.loli.net/2019/06/12/5d00f234505d239293.png" alt></p><blockquote><p>例子</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">public class StringExp1 &#123;</span><br><span class="line">     public static void main(String[] args) &#123;</span><br><span class="line">          String s1 = &quot;hello java&quot;;</span><br><span class="line">          String s2 = new String();</span><br><span class="line">          s2 = &quot;hello java&quot;;</span><br><span class="line">          String s3 = new String(&quot;hello java&quot;);</span><br><span class="line">          String s4 = new String(&quot;hello java&quot;);</span><br><span class="line">          String s5 = &quot;hello java&quot;;</span><br><span class="line">          System.out.println(s1==s2);</span><br><span class="line">          System.out.println(s1==s3);</span><br><span class="line">          System.out.println(s1==s4);</span><br><span class="line">          System.out.println(s1==s5);</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>结果</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">true</span><br><span class="line">false</span><br><span class="line">false</span><br><span class="line">true</span><br></pre></td></tr></table></figure><h5 id="比较字符串内容是否相等"><a href="#比较字符串内容是否相等" class="headerlink" title="比较字符串内容是否相等"></a>比较字符串内容是否相等</h5><ul><li>equals() 区分大小写</li><li>equalsIgnoreCase()  不区分大小写</li><li>==是比较两个字符的首地址（两个对象是否引用同一实例）</li></ul><blockquote><p>例子</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">s1 = &quot;123qwe&quot;;</span><br><span class="line">s2 = &quot;123QWE&quot;;</span><br><span class="line">System.out.println(s1.equals(s2));</span><br><span class="line">System.out.println(s1.equalsIgnoreCase(s2));</span><br></pre></td></tr></table></figure><blockquote><p>结果</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">false</span><br><span class="line">true</span><br></pre></td></tr></table></figure><h5 id="字符串常用方法"><a href="#字符串常用方法" class="headerlink" title="字符串常用方法"></a>字符串常用方法</h5><h6 id="查找字符或子字符串-返回索引-未找到返回-1"><a href="#查找字符或子字符串-返回索引-未找到返回-1" class="headerlink" title="查找字符或子字符串, 返回索引,未找到返回-1"></a>查找字符或子字符串, 返回索引,未找到返回-1</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">* indexOf(); 从左边开始查找第一个字符或子字符串</span><br><span class="line">* lastIndexOf()查找最后一个字符或子字符串</span><br></pre></td></tr></table></figure><blockquote><p>例</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">String str = &quot;abcdefgabcabc&quot;;</span><br><span class="line">int i = str.indexOf(&apos;a&apos;);//查找字符</span><br><span class="line">System.out.println(i);</span><br><span class="line">i = str.indexOf(&quot;bca&quot;);//查找子字符串</span><br><span class="line">System.out.println(i);</span><br></pre></td></tr></table></figure><blockquote><p>结果</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">0</span><br><span class="line">8</span><br></pre></td></tr></table></figure><h6 id="字符串内容操作要注意的地方"><a href="#字符串内容操作要注意的地方" class="headerlink" title="字符串内容操作要注意的地方"></a>字符串内容操作要注意的地方</h6><blockquote><p>注意：对字符串内容操作的函数不会作用与字符串本身，而是作为返回值返回。<br>原因：String 类是被final修饰的 ，final修饰的对象，一旦赋值，则内存地址不能在改变,<br>因为String对象是不能改变的，当需要更改一个字符串时，就必须将他复制到一个StringBuffered中，后者使用下列方法，在更改后会构造一个新的字符串副本。<br>例</p></blockquote><h6 id="截取字符串"><a href="#截取字符串" class="headerlink" title="截取字符串"></a>截取字符串</h6><ul><li>substring(10) 从第10个开始,截取到末尾</li><li>substring(5,10) 从第5个开始,截取到第10个</li><li>trim() 去掉两端空格</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">String str = &quot;   abcdefgabcabc   &quot;;</span><br><span class="line">System.out.println(str);</span><br><span class="line"></span><br><span class="line">String s = str.substring(10);</span><br><span class="line">System.out.println(s);</span><br><span class="line"></span><br><span class="line">s = str.substring(5,10);</span><br><span class="line">System.out.println(s);</span><br><span class="line"></span><br><span class="line">String tString = str.trim();</span><br><span class="line">System.out.println(tString);</span><br><span class="line"></span><br><span class="line">System.out.println(str);</span><br></pre></td></tr></table></figure><blockquote><p>结果</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">   abcdefgabcabc   //str存在空格</span><br><span class="line">abcabc                 //str.substring(10);</span><br><span class="line">cdefg                   //str.substring(5,10);</span><br><span class="line">abcdefgabcabc       //str.trim();</span><br><span class="line">   abcdefgabcabc    //str依然存在空格  str本身未被改变</span><br></pre></td></tr></table></figure><h6 id="分割字符串"><a href="#分割字符串" class="headerlink" title="分割字符串"></a>分割字符串</h6><ul><li>str.split(a); 根据a来分割字符串str</li></ul><blockquote><p>例</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">String question = &quot;1+1=?#A:1&amp;B:2&amp;C:3&amp;D:4#B&quot;;</span><br><span class="line"></span><br><span class="line">String[] ques = question.split(&quot;#&quot;);</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;题目描述:&quot;+ques[0]);</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;题目选项:&quot;);</span><br><span class="line"></span><br><span class="line">String[] ops = ques[1].split(&quot;&amp;&quot;);</span><br><span class="line"></span><br><span class="line">for (String o : ops) &#123;</span><br><span class="line"></span><br><span class="line">    System.out.println(o);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;答案&quot;+ques[2]);</span><br></pre></td></tr></table></figure><blockquote><p>结果</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">题目描述:1+1=?</span><br><span class="line">题目选项:</span><br><span class="line">A:1</span><br><span class="line">B:2</span><br><span class="line">C:3</span><br><span class="line">D:4</span><br><span class="line">答案A</span><br></pre></td></tr></table></figure><ul><li>其他<ul><li>charAt()</li><li>codePointAt()</li><li>replace()</li></ul></li></ul><blockquote><p>例</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">String str = &quot;abcdefgabcabc&quot;;</span><br><span class="line">System.out.println(str);</span><br><span class="line"></span><br><span class="line">//返回指定位置的字符</span><br><span class="line">char ch = str.charAt(3);</span><br><span class="line">System.out.println(ch);</span><br><span class="line"></span><br><span class="line">//返回指定位置字符的&lt;u&gt;unicode&lt;/u&gt;码</span><br><span class="line">int i = str.codePointAt(3);</span><br><span class="line">System.out.println(i);</span><br><span class="line"></span><br><span class="line">//把str中ab替换成sb</span><br><span class="line">String str2 = str.replace(&quot;ab&quot;, &quot;sb&quot;);</span><br><span class="line">System.out.println(str2);</span><br></pre></td></tr></table></figure><blockquote><p>结果</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">abcdefgabcabc</span><br><span class="line">d</span><br><span class="line">100</span><br><span class="line">sbcdefgsbcsbc</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;字符串&quot;&gt;&lt;a href=&quot;#字符串&quot; class=&quot;headerlink&quot; title=&quot;字符串&quot;&gt;&lt;/a&gt;字符串&lt;/h3&gt;&lt;h4 id=&quot;比较&quot;&gt;&lt;a href=&quot;#比较&quot; class=&quot;headerlink&quot; title=&quot;比较&quot;&gt;&lt;/a&gt;比较&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;如果是2个基本类型比较，是比较值是否相等&lt;/li&gt;
&lt;li&gt;如果是2个引用类型比较，比较的是引用类型指向的内存地址&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&quot;String-s1-”hello”与String-s2-new-String-“hello”-的区别：&quot;&gt;&lt;a href=&quot;#String-s1-”hello”与String-s2-new-String-“hello”-的区别：&quot; class=&quot;headerlink&quot; title=&quot;String s1=”hello”与String s2=new String(“hello”)的区别：&quot;&gt;&lt;/a&gt;String s1=”hello”与String s2=new String(“hello”)的区别：&lt;/h5&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;* new的对象是在堆中存储，并且每new一次就单独申请一块新的内存&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* 常量字符串在常量池(特殊的内存区域)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="个人笔记" scheme="https://shuisuinian.coding.me/categories/%E4%B8%AA%E4%BA%BA%E7%AC%94%E8%AE%B0/"/>
    
      <category term="jee学习之路" scheme="https://shuisuinian.coding.me/categories/%E4%B8%AA%E4%BA%BA%E7%AC%94%E8%AE%B0/jee%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF/"/>
    
      <category term="javase" scheme="https://shuisuinian.coding.me/categories/%E4%B8%AA%E4%BA%BA%E7%AC%94%E8%AE%B0/jee%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF/javase/"/>
    
    
      <category term="javase" scheme="https://shuisuinian.coding.me/tags/javase/"/>
    
      <category term="字符串" scheme="https://shuisuinian.coding.me/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
  </entry>
  
  <entry>
    <title>面向对象(OOP)</title>
    <link href="https://shuisuinian.coding.me/archives/2348218246.html"/>
    <id>https://shuisuinian.coding.me/archives/2348218246.html</id>
    <published>2019-06-12T12:30:44.000Z</published>
    <updated>2019-07-15T06:11:59.173Z</updated>
    
    <content type="html"><![CDATA[<h3 id="面向对象-OOP"><a href="#面向对象-OOP" class="headerlink" title="面向对象(OOP)"></a>面向对象(OOP)</h3><blockquote><p>(Object Oriented Programming)面向对象的编程<br>OOD（面向对象的设计），OOA（面向对象的分析）</p></blockquote><blockquote><p>分类是人们认识世界的一个很自然的过程<br>在日常生活中会不自觉的进行分类<br>分类要总结出类型所拥有的属性（特征）及操作（方法）</p></blockquote><a id="more"></a><h4 id="什么是对象"><a href="#什么是对象" class="headerlink" title="什么是对象"></a>什么是对象</h4><p>对象：用来描述客滚事务的一个实体，由一组属性和方法构成</p><ul><li>对象同时拥有属性和方法两项特性</li><li>对象的属性和方法通常被封装在一起，组成类，共同体现事物的特性，不能分割</li></ul><h4 id="什么是类"><a href="#什么是类" class="headerlink" title="什么是类"></a>什么是类</h4><p>类</p><ul><li>具有相同属性和方法的一组对象的集合</li><li>类是对象的类型<ul><li>不同于int类型，具有方法</li></ul></li><li>对象是类的实例<ul><li>类是摸具，模板，通过模具，模板做出来的实例就是对象</li></ul></li></ul><blockquote><p>基本类型声明的变量称为变量名<br>其他类型声明的变量称为对象名</p></blockquote><h4 id="以下两大点是查找资料时看到的，写的很好"><a href="#以下两大点是查找资料时看到的，写的很好" class="headerlink" title="以下两大点是查找资料时看到的，写的很好"></a>以下两大点是查找资料时看到的，写的很好</h4><p>参考<a href="https://www.jianshu.com/p/7a5b0043b035.html" target="_blank" rel="noopener">点击跳转</a></p><h4 id="面向对象的优点"><a href="#面向对象的优点" class="headerlink" title="面向对象的优点"></a>面向对象的优点</h4><ul><li>与人类的思维习惯一致<ul><li>把人类解决问题的思维过程转变为程序能够理解的过程</li></ul></li><li>信息隐藏，提高了程序的可维护性和安全性<ul><li>封装实现了模板化和信息隐藏</li><li>封装使得在对象外部的不能随意访问对象的属性和方法</li></ul></li><li>提高了程序的可重用性<ul><li>一个类可以创建多个实例，提高可重用性</li></ul></li></ul><h4 id="面向对象的三大特性"><a href="#面向对象的三大特性" class="headerlink" title="面向对象的三大特性"></a>面向对象的三大特性</h4><ol><li>封装<ul><li>隐藏对象的属性和实现细节，仅对外提供公共访问方式，将变化隔离，便于使用，提高复用性和安全性</li></ul></li><li>继承<ul><li>提高代码复用性；继承是多态的前提</li></ul></li><li>多态<ul><li>父类或接口定义的引用变量可以指向子类或具体实现类的实例对象。提高了程序的拓展性</li></ul></li></ol><h4 id="面向对象的五大基本原则"><a href="#面向对象的五大基本原则" class="headerlink" title="面向对象的五大基本原则"></a>面向对象的五大基本原则</h4><ol><li>单一职责原则SRP(Single Responsibility Principle)<ul><li>类的功能要单一，不能包罗万象，跟杂货铺似的</li></ul></li><li>开放封闭原则OCP(Open－Close Principle)<ul><li>一个模块对于拓展是开放的，对于修改是封闭的，想要增加功能热烈欢迎，想要修改，哼，一万个不乐意</li></ul></li><li>里式替换原则LSP(the Liskov Substitution Principle LSP)<ul><li>子类可以替换父类出现在父类能够出现的任何地方。</li></ul></li><li>依赖倒置原则DIP(the Dependency Inversion Principle DIP)<ul><li>高层次的模块不应该依赖于低层次的模块，他们都应该依赖于抽象。抽象不应该依赖于具体实现，具体实现应该依赖于抽象。就是你出国要说你是中国人，而不能说你是哪个村子的。比如说中国人是抽象的，下面有具体的xx省，xx市，xx县。你要依赖的是抽象的中国人，而不是你是xx村的。</li></ul></li><li>接口分离原则ISP(the Interface Segregation Principle ISP)<ul><li>设计时采用多个与特定客户类有关的接口比采用一个通用的接口要好。就比如一个手机拥有打电话，看视频，玩游戏等功能，把这几个功能拆分成不同的接口，比在一个接口里要好的多</li></ul></li></ol><h4 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h4><h6 id="方法的几要素"><a href="#方法的几要素" class="headerlink" title="方法的几要素"></a>方法的几要素</h6><ol><li>访问权限</li><li>方法的返回值</li><li>方法的名称</li><li>方法的参数<ul><li>方法的参数就是方法运行的必要条件</li></ul></li></ol><h6 id="如何定义一个方法"><a href="#如何定义一个方法" class="headerlink" title="如何定义一个方法"></a>如何定义一个方法</h6><ol><li>思考这个方法所要完成的功能是什么</li><li><p>这个方法需不需要返回值</p><ul><li>两种情况<ul><li>如果方法具有返回值，方法中必须使用关键字return返回该值，返回类型为该返回值的类型</li><li>如果方法没有返回值，返回类型为void </li></ul></li></ul></li><li><p>方法名（跟功能相关的单词）</p></li><li>需不需要参数</li></ol><h6 id="方法调用"><a href="#方法调用" class="headerlink" title="方法调用"></a>方法调用</h6><ul><li>同一个类之间的成员方法 可以互相调用</li><li>不同类之间方法调用的步骤:<ol><li>要先new类的对象</li><li>再 通过对象名.方法名()调用</li></ol></li></ul><h4 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h4><ul><li>局部变量<ul><li>在方法内部定义的变量一般称为局部变量，局部变量的作用域为定义位置的后面</li><li>在循环中定义的变量只对循环内部有效</li></ul></li><li>成员变量<ul><li>在类中定义的属性称为类的成员变量</li><li>成员变量的作用域为：类的所有非static方法</li></ul></li></ul><blockquote><p>成员变量和局部变量的区别:</p></blockquote><ul><li>作用域不同<ul><li>局部变量的作用域仅限于定义它的方法</li><li>成员变量的作用域在整个类内部都是可见的</li></ul></li><li>初始值不同<ul><li>Java会给成员变量一个初始值</li><li>Java不会给局部变量赋予初始值</li></ul></li><li>局部变量在同一个花括号内部中，不允许有同名局部变量；在不同的花括号中，可以有同名局部变量</li><li>两类变量同名时，局部变量具有更高的优先级</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;面向对象-OOP&quot;&gt;&lt;a href=&quot;#面向对象-OOP&quot; class=&quot;headerlink&quot; title=&quot;面向对象(OOP)&quot;&gt;&lt;/a&gt;面向对象(OOP)&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;(Object Oriented Programming)面向对象的编程&lt;br&gt;OOD（面向对象的设计），OOA（面向对象的分析）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;分类是人们认识世界的一个很自然的过程&lt;br&gt;在日常生活中会不自觉的进行分类&lt;br&gt;分类要总结出类型所拥有的属性（特征）及操作（方法）&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="个人笔记" scheme="https://shuisuinian.coding.me/categories/%E4%B8%AA%E4%BA%BA%E7%AC%94%E8%AE%B0/"/>
    
      <category term="jee学习之路" scheme="https://shuisuinian.coding.me/categories/%E4%B8%AA%E4%BA%BA%E7%AC%94%E8%AE%B0/jee%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF/"/>
    
      <category term="javase" scheme="https://shuisuinian.coding.me/categories/%E4%B8%AA%E4%BA%BA%E7%AC%94%E8%AE%B0/jee%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF/javase/"/>
    
    
      <category term="javase" scheme="https://shuisuinian.coding.me/tags/javase/"/>
    
      <category term="面向对象" scheme="https://shuisuinian.coding.me/tags/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript（后续）</title>
    <link href="https://shuisuinian.coding.me/archives/3972042800.html"/>
    <id>https://shuisuinian.coding.me/archives/3972042800.html</id>
    <published>2019-05-31T10:39:55.000Z</published>
    <updated>2019-07-15T06:11:39.226Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JavaScript-（后续：1）"><a href="#JavaScript-（后续：1）" class="headerlink" title="JavaScript （后续：1）"></a>JavaScript （后续：1）</h1><p>alert();警告框<br>prompt():输入框  返回输入的值<br>confirm():确认框  返回值：true/false<br>//相当于window.confirm();</p><a id="more"></a><h3 id="js自定义函数的语法"><a href="#js自定义函数的语法" class="headerlink" title="js自定义函数的语法"></a>js自定义函数的语法</h3><p>function 函数名(参数（形参）列表){</p><p>}</p><h3 id="系统函数"><a href="#系统函数" class="headerlink" title="系统函数"></a>系统函数</h3><ol><li>parseInt<br> 把字符串类型转换成number类型变量</li><li>parseFloat<br> 把字符串小数转换成number类型变量</li><li>isNaN()<br> 判断变量是否是 非数字</li><li>history.back(); 返回上一页</li><li>history.forward() 前往下一页</li><li>history.go();<ol><li>history.go(1) 前往下一页</li><li>history.go(-1) 返回上一页</li><li>history.go(2) 前往下两页</li><li>history.go(-2) 返回上两页</li></ol></li><li>loadtion.reload() 刷新当前页面</li><li>var date = new Date();获取当前系统时间<ol><li>date.getFullYear()  获取4位年份</li><li>date.getMinutes()+1; 月份</li><li>date.getDate();获取当前日</li><li>date.getHours();获取当前小时</li><li>date.getMinutes()获取分钟</li><li>date.getSeconds()获取秒</li><li>date.getMilliseconds()//毫秒</li></ol></li></ol><h3 id="常用的事件"><a href="#常用的事件" class="headerlink" title="常用的事件"></a>常用的事件</h3><ol><li>onclick() 单击事件</li><li>onkeydown() 键盘敲击事件</li><li>onmouseover() 鼠标移入元素</li><li>onmouseout() 鼠标移开元素</li><li>onload() 页面加载完成后执行的方法</li><li>onchange()  <strong>表单元素</strong>被改变内容</li></ol><h3 id="js中的定时器"><a href="#js中的定时器" class="headerlink" title="js中的定时器"></a>js中的定时器</h3><ul><li>setTimeout（）； 设置一次性的闹钟</li></ul><blockquote><p>如： var tm=setTImeout（“test（）”，3000）3秒后调用test函数   (这里返回的值是定时器的标识) </p></blockquote><ul><li>clearTimeout();      清除一次性的定时器</li></ul><blockquote><p>如：clearTimeout(tm);   (这里的tm是上面的变量，即是定时器的标识) </p></blockquote><ul><li>setInterval() ; 设置循环闹钟</li></ul><blockquote><p>如： var am=setInterval（“test（）”，3000）3秒后调用test函数  (这里返回的值是定时器的标识) </p></blockquote><ul><li>clearInterval()    清除循环闹钟</li></ul><blockquote><p>如：clearInterval(am);     (这里的am是上面的变量，即是定时器的标识) </p></blockquote><h3 id="js标签对象"><a href="#js标签对象" class="headerlink" title="js标签对象"></a>js标签对象</h3><ol><li>innerText获取或者设置标签里面的文本内容(不包括子标签)</li><li>innerHTML获取或设置标签里面的所有HTML文本(包括子标签及普通文本)</li></ol><blockquote><p>getElementById()    返回对拥有指定id的第一个对象的引用<br>getElementsByName()    返回带有指定名称的对象的集合<br>getElementsByTagName()    返回带有指定标签名的对象的集合<br>getElementsByClassName() 返回带有指定class名称的对象集合<br>write()    向文档写文本、HTML表达式或JavaScript代码</p></blockquote><h3 id="js变量的作用域："><a href="#js变量的作用域：" class="headerlink" title="js变量的作用域："></a>js变量的作用域：</h3><ol><li>局部变量<br> 在函数内部定义的变量，<br> 旨在函数内部有效，并且在定义的后面</li><li>全局变量<br> 不是在函数内部定义的变量<br> 在<code>&lt;script&gt;</code>中定义的变量，对整个页面都有效</li></ol><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><p>数组也是一种变量，这种变量代表多个值<br>数组对象是使用单独的变量名来存储一系列的值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">//声明数组</span><br><span class="line">var array = new Array();</span><br><span class="line">//给数组中的元素赋值，下标从0开始</span><br><span class="line">array[0] = 111;</span><br><span class="line">array[1] = 222;</span><br><span class="line">array[2] = 333;</span><br><span class="line">//array.length 返回数组的长度</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;JavaScript-（后续：1）&quot;&gt;&lt;a href=&quot;#JavaScript-（后续：1）&quot; class=&quot;headerlink&quot; title=&quot;JavaScript （后续：1）&quot;&gt;&lt;/a&gt;JavaScript （后续：1）&lt;/h1&gt;&lt;p&gt;alert();警告框&lt;br&gt;prompt():输入框  返回输入的值&lt;br&gt;confirm():确认框  返回值：true/false&lt;br&gt;//相当于window.confirm();&lt;/p&gt;
    
    </summary>
    
      <category term="个人笔记" scheme="https://shuisuinian.coding.me/categories/%E4%B8%AA%E4%BA%BA%E7%AC%94%E8%AE%B0/"/>
    
      <category term="jee学习之路" scheme="https://shuisuinian.coding.me/categories/%E4%B8%AA%E4%BA%BA%E7%AC%94%E8%AE%B0/jee%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF/"/>
    
      <category term="html" scheme="https://shuisuinian.coding.me/categories/%E4%B8%AA%E4%BA%BA%E7%AC%94%E8%AE%B0/jee%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF/html/"/>
    
    
      <category term="js" scheme="https://shuisuinian.coding.me/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript</title>
    <link href="https://shuisuinian.coding.me/archives/3424359953.html"/>
    <id>https://shuisuinian.coding.me/archives/3424359953.html</id>
    <published>2019-05-27T12:01:01.000Z</published>
    <updated>2019-07-15T06:11:40.425Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h1><h2 id="什么是JavaScript（js）"><a href="#什么是JavaScript（js）" class="headerlink" title="什么是JavaScript（js）"></a>什么是JavaScript（js）</h2><ol><li>js是浏览器客户端的一种语言（浏览器是js程序的运行时的环境）</li><li>js主要的作用就是用来操作html、css</li><li>网页中的特效代码都是用js实现的</li></ol><a id="more"></a><blockquote><p>例如：<br>悬浮广告<br>轮播图</p></blockquote><h2 id="JavaScript的组成"><a href="#JavaScript的组成" class="headerlink" title="JavaScript的组成"></a>JavaScript的组成</h2><ol><li>ecmascript<br> js的基本语法：for，while，dowhile循环<br> if语句，数组，变量，数据类型</li><li>document操作<br> html，css的操作</li><li>bom<br> 浏览器窗口的一些操作<br> 回到上一页，下一页<br> 弹窗</li></ol><h2 id="js脚本的使用方式"><a href="#js脚本的使用方式" class="headerlink" title="js脚本的使用方式"></a>js脚本的使用方式</h2><ol><li><p>在html的文件内部的任意地方加入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">        //代码部分</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li><li><p>链接外部js文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=&quot;外部js文件&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure></li><li><p>简短缩写方式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=&quot;javascript:js代码&quot;&gt;a的js应用&lt;/a&gt;</span><br></pre></td></tr></table></figure></li></ol><h2 id="JavaScript-能够以不同方式“显示”数据"><a href="#JavaScript-能够以不同方式“显示”数据" class="headerlink" title="JavaScript 能够以不同方式“显示”数据"></a>JavaScript 能够以不同方式“显示”数据</h2><ol><li>使用 window.alert() 写入警告框</li><li>使用 document.write() 写入 HTML 输出</li><li>使用 console.log() 写入浏览器控制台</li><li>使用 innerHTML 写入 HTML 元素</li></ol><h2 id="变量的使用和声明"><a href="#变量的使用和声明" class="headerlink" title="变量的使用和声明"></a>变量的使用和声明</h2><h3 id="js中定义变量"><a href="#js中定义变量" class="headerlink" title="js中定义变量"></a>js中定义变量</h3><ol><li>统一用关键字var</li><li>或者直接使用变量，无需定义</li></ol><h3 id="js中变量的声明和赋值"><a href="#js中变量的声明和赋值" class="headerlink" title="js中变量的声明和赋值"></a>js中变量的声明和赋值</h3><ol><li><p>只定义没有赋值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var width，height;</span><br><span class="line">width=5;//之后单独赋值</span><br><span class="line">height=10;</span><br></pre></td></tr></table></figure></li><li><p>定义并且同时赋值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var width=5,height=10;</span><br></pre></td></tr></table></figure></li><li><p>不定义直接赋值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">height = 999 ;</span><br></pre></td></tr></table></figure></li></ol><h2 id="js的几种数据类型"><a href="#js的几种数据类型" class="headerlink" title="js的几种数据类型"></a>js的几种数据类型</h2><ol><li>undefined 未定义<br> 一个变量没有赋值</li><li>boolean<br> 只有true/false两种值</li><li>number 数字类型（整数或小数）</li><li>string 字符串类型<br> 一般情况string都是用双引号或者单引号括起来</li><li>object 对象类型</li></ol><blockquote><p>typeof() 可以检测变量数据类型<br>以下例子：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var a;//没有赋值，undefined类型</span><br><span class="line">var b = 12.2;//number类型</span><br><span class="line">var c = &quot;12.2&quot;;//string类型</span><br><span class="line">var is = true;//boolean类型</span><br><span class="line">var n = null;//object类型</span><br><span class="line">document.write(typeof(a));//检测a的数据类型类型</span><br></pre></td></tr></table></figure><h3 id="字符串的-双引号问题"><a href="#字符串的-双引号问题" class="headerlink" title="字符串的 双引号问题"></a>字符串的 双引号问题</h3><blockquote><p>在一个双引号字符串之间如果要加入双引号<br>有三种方法：<br>1：不加双引号：没有严重的影响(不推荐)<br>2：用单引号代替<br>3：用转义字符-&gt; \”</p><blockquote><p>例1：</p></blockquote></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//用转义字符</span><br><span class="line">var str = &quot;&lt;div style=\&quot;width:&quot;+a+&quot;px\&quot;&gt;&lt;/div&gt;&quot;;</span><br><span class="line">//用单引号代替</span><br><span class="line">var str2 = &quot;&lt;div style=&apos;width:&quot;+a+&quot;px&apos;&gt;&lt;/div&gt;&quot;;</span><br></pre></td></tr></table></figure><blockquote><blockquote><p>例2:</p></blockquote></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var a = 100;</span><br><span class="line">var str = &quot;&lt;div style=\&quot;&quot;+</span><br><span class="line">        &quot;width:&quot; + a + &quot;px;&quot;+</span><br><span class="line">        &quot;height: 100px;&quot; +</span><br><span class="line">        &quot;border: 1px solid red;&quot;+</span><br><span class="line">        &quot;\&quot;&gt;&lt;/div&gt;&quot;;</span><br><span class="line">document.write(str);</span><br></pre></td></tr></table></figure><h2 id="javascript运算符"><a href="#javascript运算符" class="headerlink" title="javascript运算符"></a>javascript运算符</h2><table><thead><tr><th>算数运算符</th><th>+</th><th>-</th><th>*</th><th>/</th><th>%</th><th>++</th><th>–</th></tr></thead><tbody><tr><td>赋值运算符</td><td>=</td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>比较运算符</td><td>&lt;</td><td>&gt;</td><td>&lt;=</td><td>&gt;=</td><td>==</td><td>!=</td><td>===</td></tr><tr><td>逻辑运算符</td><td>&amp;&amp;</td><td>&#124;  &#124;</td><td>!</td><td></td><td></td><td></td><td></td></tr></tbody></table><p>在一个js的运算表达式中，如果都是number类型，则整个结果也是number类型<br>表达式是从左到右开始运算，一旦遇到字符串，则后面的运算全部是字符串连接</p><blockquote><p>例1</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">var x = 3;</span><br><span class="line">var y = 5;</span><br><span class="line">var z = 10;</span><br><span class="line">var ch = &quot;字符&quot;;</span><br><span class="line">document.write(x + z + ch + x + z+&quot;&lt;br/&gt;&quot;);</span><br><span class="line">var n = null;</span><br><span class="line">n = z/x;</span><br><span class="line">document.write(&quot;n=&quot;+n+&quot;:&quot;+typeof(n)+&quot;&lt;br/&gt;&quot;);</span><br><span class="line">//除法 10/3会得到小数  而不是 3</span><br></pre></td></tr></table></figure><blockquote><p>例1结果：后面的x+z 变为了字符连接。如下图</p></blockquote><p><img src="https://i.loli.net/2019/05/27/5cebd5fbb494021584.png" alt></p><blockquote><p>例2<br>关于 表达式简写 下面以 + 为例（+ - * / % 用法一样）</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var n = 1;</span><br><span class="line">n = n + 1;</span><br><span class="line">document.write(&quot;n=&quot;+ n + &quot;,&quot; +&quot;&lt;br/&gt;&quot;);</span><br><span class="line">var n = 1;</span><br><span class="line">n += 1;</span><br><span class="line">document.write(&quot;n=&quot;+ n + &quot;,&quot; +&quot;&lt;br/&gt;&quot;);</span><br></pre></td></tr></table></figure><blockquote><p>例2结果：</p></blockquote><p><img src="https://i.loli.net/2019/05/27/5cebd5fbd20d942789.png" alt></p><blockquote><p>例3<br>自增运算符：++ （自减运算符：–，用法一样）</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">n = z++;//先把z的值赋值给n，再自己加1</span><br><span class="line">document.write(n + &quot;,&quot; + z +&quot;&lt;br/&gt;&quot;);</span><br><span class="line">n = ++z;//z先加1，再赋值给n</span><br><span class="line">document.write(n + &quot;,&quot; + z +&quot;&lt;br/&gt;&quot;);</span><br></pre></td></tr></table></figure><blockquote><p>例3结果：</p></blockquote><p><img src="https://i.loli.net/2019/05/27/5cebd5fc8adb643338.png" alt></p><blockquote><p>例4<br>js中对于 == 和 ===的区别</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var i=2;</span><br><span class="line">var ch = &quot;2&quot;</span><br><span class="line">document.write(i==ch);//显示true</span><br><span class="line">document.write(&quot;&lt;br/&gt;&quot;);//换个行</span><br><span class="line">document.write(i === ch);//显示false</span><br><span class="line">//===会先判断类型是否相等</span><br></pre></td></tr></table></figure><blockquote><p>例4结果:<br><img src="https://i.loli.net/2019/05/27/5cebd5fbb48f662653.png" alt></p></blockquote><h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><ol><li>&amp;&amp; 逻辑与<br> true &amp;&amp; true 表达式返回true<br> 两边都为真 返回真</li><li>|| 逻辑或<br> false &amp;&amp; true 表达式返回true<br> 只要一边为真 返回真</li><li>！逻辑非<br> !true 返回假<br> !false 返回真<br> 真变成假<br> 假变成真</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;JavaScript&quot;&gt;&lt;a href=&quot;#JavaScript&quot; class=&quot;headerlink&quot; title=&quot;JavaScript&quot;&gt;&lt;/a&gt;JavaScript&lt;/h1&gt;&lt;h2 id=&quot;什么是JavaScript（js）&quot;&gt;&lt;a href=&quot;#什么是JavaScript（js）&quot; class=&quot;headerlink&quot; title=&quot;什么是JavaScript（js）&quot;&gt;&lt;/a&gt;什么是JavaScript（js）&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;js是浏览器客户端的一种语言（浏览器是js程序的运行时的环境）&lt;/li&gt;
&lt;li&gt;js主要的作用就是用来操作html、css&lt;/li&gt;
&lt;li&gt;网页中的特效代码都是用js实现的&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="个人笔记" scheme="https://shuisuinian.coding.me/categories/%E4%B8%AA%E4%BA%BA%E7%AC%94%E8%AE%B0/"/>
    
      <category term="jee学习之路" scheme="https://shuisuinian.coding.me/categories/%E4%B8%AA%E4%BA%BA%E7%AC%94%E8%AE%B0/jee%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF/"/>
    
      <category term="html" scheme="https://shuisuinian.coding.me/categories/%E4%B8%AA%E4%BA%BA%E7%AC%94%E8%AE%B0/jee%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF/html/"/>
    
    
      <category term="js" scheme="https://shuisuinian.coding.me/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>CSS</title>
    <link href="https://shuisuinian.coding.me/archives/3999917138.html"/>
    <id>https://shuisuinian.coding.me/archives/3999917138.html</id>
    <published>2019-05-22T11:47:01.000Z</published>
    <updated>2019-07-15T06:10:53.166Z</updated>
    
    <content type="html"><![CDATA[<h3 id="css"><a href="#css" class="headerlink" title="css"></a>css</h3><h4 id="css的作用"><a href="#css的作用" class="headerlink" title="css的作用"></a>css的作用</h4><ol><li>美化网页</li><li>设置字体的大小</li><li>设置容器的位置，大小</li><li>设置图片</li></ol><a id="more"></a><h4 id="写css样式的方法"><a href="#写css样式的方法" class="headerlink" title="写css样式的方法"></a>写css样式的方法</h4><ol><li>内部样式<br> 在head标签里面加上 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;style type=&quot;text/css&quot;&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure></li></ol><ol start="2"><li>行内样式<br> 在标签里面加上style=””</li><li>外部样式<br> 连接一个专门的css文件</li></ol><h4 id="css基本语法"><a href="#css基本语法" class="headerlink" title="css基本语法"></a>css基本语法</h4><p> 选择器(即要修饰的对象){<br>    css属性1:属性值1;<br>    css属性2:属性值2;<br> }</p><blockquote><p>例如：<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">p&#123; </span><br><span class="line">    border-radius: 2.5em;    </span><br><span class="line">    background-color: rgba(255, 169, 88, 0.12);    </span><br><span class="line">    text-align: center;    </span><br><span class="line">    font-size: 13px;/*改变字体大小*/    </span><br><span class="line">    color: red;/*改变字体颜色*/</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><h5 id="选择器的分类"><a href="#选择器的分类" class="headerlink" title="选择器的分类"></a>选择器的分类</h5><ol><li>标签选择器</li><li><p>类选择器<br> 给标签取个class名字<br> css用<br> .class名{<br> }</p><blockquote><p>例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">.li1&#123;    </span><br><span class="line">font-size: 20px;    </span><br><span class="line">color: #000;    </span><br><span class="line">font-family: 华文宋体;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote></li><li><p>id选择器<br> 给标签取个唯一id<br> css用<br> #id{<br> }</p><blockquote><p>例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#li1&#123;    </span><br><span class="line">text-decoration: overline;    </span><br><span class="line">font-size: 16px;    </span><br><span class="line">letter-spacing: 15px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote></li><li><p>后代选择器<br> 选择该元素的所有后代,无论第几代</p></li><li>子代选择器<br> 只选择第一代</li><li>兄弟选择器<br> 查找id=li1的元素后面的<br>所有兄弟元</li><li>相邻兄弟选择器<br> 查找id=li1的元素后面的第一个为li标签的兄弟元<h6 id="优先级"><a href="#优先级" class="headerlink" title="优先级"></a>优先级</h6>id&gt;class&gt;子代&gt;后代</li></ol><h4 id="css属性"><a href="#css属性" class="headerlink" title="css属性"></a>css属性</h4><h5 id="文本属性"><a href="#文本属性" class="headerlink" title="文本属性"></a>文本属性</h5><blockquote><p>font-family:字体<br>Font-size:字体大小<br>Font-weight:是否加粗<br>color设置颜色<br>Text-indent:首行缩进<br>text-align：center/left/right对齐<br>Line-height:最主要的作用是设置文字相对容器垂直居中如果line-height等于height，文字就会垂直居中<br>white-space: pre;/<em>保留空白字符</em>/<br>white-space: normal;/<em>忽略空白字符</em>/</p></blockquote><h5 id="背景属性"><a href="#背景属性" class="headerlink" title="背景属性"></a>背景属性</h5><blockquote><p>Background-color:背景颜色<br>Background-image:url(“图片地址”)背景图片<br>Background-repeat:（背景重复方式）<br>repeat（重复，默认）<br>no-repeat(不重复)<br>Repeat-x（x轴上重复）<br>Repeat-y（y轴上重复）<br>Background-positionn: -20px  10px (控制背景图片的位置，将背景图片向左偏移20px，向下偏移10px)</p></blockquote><h5 id="其他属性"><a href="#其他属性" class="headerlink" title="其他属性"></a>其他属性</h5><blockquote><p>text-decoration：（加下划线）<br>underline下划线<br>line-through 删除线<br>overline 上划线<br>none 不需要线<br>letter-spacing:（设置文字之间的间距）数字px;</p></blockquote><blockquote><p>list-style：none；（去掉li前的圆心）<br>square;(改为矩形矩形)<br>circle；（空心圆）<br>disc；（实心圆，默认）</p></blockquote><h4 id="盒子模型"><a href="#盒子模型" class="headerlink" title="盒子模型"></a>盒子模型</h4><p>一个盒子（容器）是由4部分组成的：</p><ol><li>里面的内容（元素内容）</li><li><p>內边距（容器与内容之间的距离）<br> padding设置</p><ul><li>padding-left:</li><li>padding-top:</li><li>padding-right:</li><li>padding-bottom:</li><li>缩写形式1：padding：10px,10px,10px,10px;(上右下左)</li><li>缩写形式2：padding：10px,20px;(上下10，左右20)</li></ul></li><li><p>外边距（容器与外部的距离）<br> margin设置</p><ul><li>margin-left:</li><li>margin-top:</li><li>margin-right:</li><li>margin-bottom:</li><li>缩写形式：margin：10px,10px,10px,10px;(上右下左)</li><li>缩写形式2：margin：10px,20px;(上下10，左右20)</li></ul></li><li>边框（边框线）<br> border设置</li></ol><blockquote><p>例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.box&#123;    </span><br><span class="line">    width: 300px;    </span><br><span class="line">    height: 200px;    </span><br><span class="line">    border: 1px solid red;    </span><br><span class="line">    padding-left: 20px;    </span><br><span class="line">    padding-top: 20px;    </span><br><span class="line">    margin-top: 30px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>常用水平居中的方法：（容器相对于外部容器）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">.box&#123;    </span><br><span class="line">    width: 300px;    </span><br><span class="line">    height: 200px;    </span><br><span class="line">    margin: 0px auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>容器的实际宽高=css设置的宽高+边框的大小+padding</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;css&quot;&gt;&lt;a href=&quot;#css&quot; class=&quot;headerlink&quot; title=&quot;css&quot;&gt;&lt;/a&gt;css&lt;/h3&gt;&lt;h4 id=&quot;css的作用&quot;&gt;&lt;a href=&quot;#css的作用&quot; class=&quot;headerlink&quot; title=&quot;css的作用&quot;&gt;&lt;/a&gt;css的作用&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;美化网页&lt;/li&gt;
&lt;li&gt;设置字体的大小&lt;/li&gt;
&lt;li&gt;设置容器的位置，大小&lt;/li&gt;
&lt;li&gt;设置图片&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="个人笔记" scheme="https://shuisuinian.coding.me/categories/%E4%B8%AA%E4%BA%BA%E7%AC%94%E8%AE%B0/"/>
    
      <category term="jee学习之路" scheme="https://shuisuinian.coding.me/categories/%E4%B8%AA%E4%BA%BA%E7%AC%94%E8%AE%B0/jee%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF/"/>
    
      <category term="html" scheme="https://shuisuinian.coding.me/categories/%E4%B8%AA%E4%BA%BA%E7%AC%94%E8%AE%B0/jee%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF/html/"/>
    
    
      <category term="html" scheme="https://shuisuinian.coding.me/tags/html/"/>
    
      <category term="css" scheme="https://shuisuinian.coding.me/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>什么是HTML</title>
    <link href="https://shuisuinian.coding.me/archives/625187715.html"/>
    <id>https://shuisuinian.coding.me/archives/625187715.html</id>
    <published>2019-05-21T10:27:25.000Z</published>
    <updated>2019-07-15T06:11:50.789Z</updated>
    
    <content type="html"><![CDATA[<h3 id="什么是HTML"><a href="#什么是HTML" class="headerlink" title="什么是HTML"></a>什么是HTML</h3><ul><li>html是超文本标记语言</li><li>html就是用来做网站前端的</li></ul><blockquote><blockquote><p>偏硬件</p></blockquote><p>汇编语言<br>c语言<br>c++</p></blockquote><blockquote><blockquote><p>偏向应用</p></blockquote><p>java:网站应用系统。数据分析，安卓的app<br>c#</p></blockquote><ul><li>浏览器： ”解释和执行“HTML的工具</li><li>html主要有若干个标签组成：<a id="more"></a></li></ul><h5 id="html标签分为块状标签和行级标签"><a href="#html标签分为块状标签和行级标签" class="headerlink" title="html标签分为块状标签和行级标签"></a>html标签分为块状标签和行级标签</h5><ol><li>块状标签: 独占一行或者前后隔一空行</li></ol><p></p><h1>标题h1</h1><p></p><p></p><h2>标题h2</h2><p></p><p></p><h3>标题h3</h3><p></p><p></p><h4>标题h4</h4><p></p><p></p><h5>标题h5</h5><p></p><p></p><h6>标题h6</h6><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;h1&gt;标题h1&lt;/h1&gt;</span><br><span class="line">&lt;h2&gt;标题h2&lt;/h2&gt;</span><br><span class="line">&lt;h3&gt;标题h3&lt;/h3&gt;</span><br><span class="line">&lt;h4&gt;标题h4&lt;/h4&gt;</span><br><span class="line">&lt;h5&gt;标题h5&lt;/h5&gt;</span><br><span class="line">&lt;h6&gt;标题h6&lt;/h6&gt;</span><br></pre></td></tr></table></figure><p></p><p></p><p>段落标签</p><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;p&gt;段落标签&lt;/p&gt;</span><br></pre></td></tr></table></figure><p></p><p>水平线标签</p><p><hr><!--水平线标签--><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;hr&gt;</span><br></pre></td></tr></table></figure></p><blockquote><p>段落标签和h标签的区别是：<br>1：h标签字体加粗加大<br>2：p段落标签是网页默认字体</p></blockquote><p>有序列表标签</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;ol&gt;</span><br><span class="line">&lt;li&gt;淘宝&lt;/li&gt;</span><br><span class="line">&lt;li&gt;京东&lt;/li&gt;</span><br><span class="line">&lt;/ol&gt;</span><br></pre></td></tr></table></figure><p>无序列表标签<br>如：</p><p><ul></ul></p><p><li>淘宝</li></p><p><li>京东</li><br><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul&gt;</span><br><span class="line">&lt;li&gt;淘宝&lt;/li&gt;</span><br><span class="line">&lt;li&gt;京东&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure></p><p><dl></dl></p><p><dt>商品某某</dt></p><p><dd>价格：199</dd></p><p><dd>库存：99</dd><br><br>定义描述标签<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dl&gt;</span><br><span class="line">&lt;dt&gt;商品某某&lt;/dt&gt;</span><br><span class="line">&lt;dd&gt;价格：199&lt;/dd&gt;</span><br><span class="line">&lt;dd&gt;库存：99&lt;/dd&gt;</span><br><span class="line">&lt;/dl&gt;</span><br></pre></td></tr></table></figure></p><p>表格标签<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;table&gt;</span><br><span class="line">&lt;tr&gt;</span><br><span class="line">&lt;td&gt;&lt;/td&gt;</span><br><span class="line">&lt;/tr&gt;</span><br><span class="line">&lt;/table&gt;</span><br></pre></td></tr></table></figure></p><h5 id="行级标签：不独占一行"><a href="#行级标签：不独占一行" class="headerlink" title="行级标签：不独占一行"></a>行级标签：不独占一行</h5><p>图像标签：在网页中插入图片<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=&quot;../images/b2.jpg&quot; alt=&quot;图片&quot; width=&quot;250&quot; height=&quot;250&quot; title=&quot;ssss&quot;&gt;</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;span&gt;&lt;/span&gt;范围标签</span><br><span class="line">&lt;br/&gt;换行标签</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;什么是HTML&quot;&gt;&lt;a href=&quot;#什么是HTML&quot; class=&quot;headerlink&quot; title=&quot;什么是HTML&quot;&gt;&lt;/a&gt;什么是HTML&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;html是超文本标记语言&lt;/li&gt;
&lt;li&gt;html就是用来做网站前端的&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;偏硬件&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;汇编语言&lt;br&gt;c语言&lt;br&gt;c++&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;偏向应用&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;java:网站应用系统。数据分析，安卓的app&lt;br&gt;c#&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;浏览器： ”解释和执行“HTML的工具&lt;/li&gt;
&lt;li&gt;html主要有若干个标签组成：
    
    </summary>
    
      <category term="个人笔记" scheme="https://shuisuinian.coding.me/categories/%E4%B8%AA%E4%BA%BA%E7%AC%94%E8%AE%B0/"/>
    
      <category term="jee学习之路" scheme="https://shuisuinian.coding.me/categories/%E4%B8%AA%E4%BA%BA%E7%AC%94%E8%AE%B0/jee%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF/"/>
    
      <category term="html" scheme="https://shuisuinian.coding.me/categories/%E4%B8%AA%E4%BA%BA%E7%AC%94%E8%AE%B0/jee%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF/html/"/>
    
    
      <category term="html" scheme="https://shuisuinian.coding.me/tags/html/"/>
    
  </entry>
  
  <entry>
    <title>习惯的开始</title>
    <link href="https://shuisuinian.coding.me/archives/3717175919.html"/>
    <id>https://shuisuinian.coding.me/archives/3717175919.html</id>
    <published>2019-05-21T06:49:11.000Z</published>
    <updated>2019-07-15T06:23:25.551Z</updated>
    
    <content type="html"><![CDATA[<h4 id="习惯的开始"><a href="#习惯的开始" class="headerlink" title="习惯的开始"></a>习惯的开始</h4><p>最近开始在系统的学习jee了，争取每几节课都能给自己做个知识总结，或者说是笔记，备忘吧！试着开始这样的学习希望能坚持一点时间</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;习惯的开始&quot;&gt;&lt;a href=&quot;#习惯的开始&quot; class=&quot;headerlink&quot; title=&quot;习惯的开始&quot;&gt;&lt;/a&gt;习惯的开始&lt;/h4&gt;&lt;p&gt;最近开始在系统的学习jee了，争取每几节课都能给自己做个知识总结，或者说是笔记，备忘吧！试着开始这样的学习希望能坚持
      
    
    </summary>
    
      <category term="个人笔记" scheme="https://shuisuinian.coding.me/categories/%E4%B8%AA%E4%BA%BA%E7%AC%94%E8%AE%B0/"/>
    
      <category term="jee学习之路" scheme="https://shuisuinian.coding.me/categories/%E4%B8%AA%E4%BA%BA%E7%AC%94%E8%AE%B0/jee%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF/"/>
    
      <category term="一个开始" scheme="https://shuisuinian.coding.me/categories/%E4%B8%AA%E4%BA%BA%E7%AC%94%E8%AE%B0/jee%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF/%E4%B8%80%E4%B8%AA%E5%BC%80%E5%A7%8B/"/>
    
    
      <category term="html" scheme="https://shuisuinian.coding.me/tags/html/"/>
    
  </entry>
  
  <entry>
    <title>oracle10g在win7下的安装</title>
    <link href="https://shuisuinian.coding.me/archives/2261899728.html"/>
    <id>https://shuisuinian.coding.me/archives/2261899728.html</id>
    <published>2019-03-16T12:00:31.000Z</published>
    <updated>2019-07-15T06:11:38.030Z</updated>
    
    <content type="html"><![CDATA[<h2 id="oracle10g在win7x64下的安装"><a href="#oracle10g在win7x64下的安装" class="headerlink" title="oracle10g在win7x64下的安装"></a>oracle10g在win7x64下的安装</h2><blockquote><p>最近学oracle数据库，教的是10g版的，先试着安装</p></blockquote><a id="more"></a><ul><li><p>下载合适的版本，官网上10g版本现在是找不到下载的，大家可以自行百度（这里给些链接，复制链接到迅雷下载）</p><p><a href="http://download.oracle.com/otn/nt/oracle10g/10201/102010_win64_x64_database.zip" target="_blank" rel="noopener">http://download.oracle.com/otn/nt/oracle10g/10201/102010_win64_x64_database.zip</a> </p><p>如果是win7 64位,可能上面的版本还是无法安装，需要下载下面的这个版本:  <a href="http://download.oracle.com/otn/nt/oracle10g/10204/10204_vista_w2k8_x64_production_db.zip" target="_blank" rel="noopener">http://download.oracle.com/otn/nt/oracle10g/10204/10204_vista_w2k8_x64_production_db.zip</a></p></li><li><p>下载之后，如果直接安装还是会出问题的，所以在安装之前需要修改一些文件</p><ol><li>解压安装包，进入安装包目录</li><li>进入 安装包/database/install/ 路径下</li><li><p>修改oraparam.ini文件，找到 Windows=5.0,5.1,5.2,6.0<br>修改如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CERTIFIED_VERSION_FAILURE_MESSAGE</span><br><span class="line">Windows=5.0,5.1,5.2,6.0,6.1</span><br></pre></td></tr></table></figure></li><li><p>在安装包搜索 refhost.xml 文件，搜索到两个文件，都需要修改，如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--Microsoft Windows Vista--&gt;</span><br><span class="line">&lt;OPERATING_SYSTEM&gt;</span><br><span class="line">  &lt;VERSION VALUE=&quot;6.0&quot;/&gt;</span><br><span class="line">&lt;/OPERATING_SYSTEM&gt;</span><br><span class="line">&lt;OPERATING_SYSTEM&gt;</span><br><span class="line">  &lt;VERSION VALUE=&quot;6.1&quot;/&gt;</span><br><span class="line">&lt;/OPERATING_SYSTEM&gt;</span><br></pre></td></tr></table></figure></li></ol><blockquote><p>说明：6.1表示windows的内核版本，Windows 7的内核版本号为6.1</p></blockquote></li><li><p>修改完成后 ，再去安装基本不会出问题。<br>不过我安装的时候，报错：启动 Database Control 时出错，导致OracleDBConsoleorcl（数据库控制台服务）没有开启，使用时发现OEM无法使用，只能用iSQLplus和SQLplus工具<br>以前安装12c的时候按照网上教程倒没有什么问题，不知道哪里还需要修改的。<br>emmm…先这样吧。。</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;oracle10g在win7x64下的安装&quot;&gt;&lt;a href=&quot;#oracle10g在win7x64下的安装&quot; class=&quot;headerlink&quot; title=&quot;oracle10g在win7x64下的安装&quot;&gt;&lt;/a&gt;oracle10g在win7x64下的安装&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;最近学oracle数据库，教的是10g版的，先试着安装&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="环境搭建" scheme="https://shuisuinian.coding.me/categories/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    
      <category term="oracle数据库" scheme="https://shuisuinian.coding.me/categories/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/oracle%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="数据库" scheme="https://shuisuinian.coding.me/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="oracle" scheme="https://shuisuinian.coding.me/tags/oracle/"/>
    
  </entry>
  
  <entry>
    <title>hexo+Next主题</title>
    <link href="https://shuisuinian.coding.me/archives/524570569.html"/>
    <id>https://shuisuinian.coding.me/archives/524570569.html</id>
    <published>2019-03-16T08:57:35.000Z</published>
    <updated>2019-07-15T06:11:42.233Z</updated>
    
    <content type="html"><![CDATA[<h4 id="安装next主题"><a href="#安装next主题" class="headerlink" title="安装next主题"></a>安装next主题</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/theme-next/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure><h4 id="启用主题"><a href="#启用主题" class="headerlink" title="启用主题"></a>启用主题</h4><p>修改博客根目录下的配置文件_config.yml:<br><a id="more"></a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># Extensions</span><br><span class="line">## Plugins: https://hexo.io/plugins/</span><br><span class="line">## Themes: https://hexo.io/themes/</span><br><span class="line">theme: next</span><br></pre></td></tr></table></figure></p><h4 id="主题设定"><a href="#主题设定" class="headerlink" title="主题设定"></a>主题设定</h4><p>修改Next目录下的配置文件_config.yml:<br>搜索字段：Scheme 可找到以下内容：</p><ul><li>Muse - 默认 Scheme，这是 NexT 最初的版本，黑白主调，大量留白</li><li>Mist - Muse 的紧凑版本，整洁有序的单栏外观</li><li>Pisces - 双栏 Scheme，小家碧玉似的清新</li><li>Gemini - 左侧网站信息及目录，块+片段结构布局</li></ul><p>Scheme 的切换通过更改 主题配置文件，搜索 scheme 关键字。 你会看到有四行 scheme 的配置，将你需用启用的 scheme 前面注释 # 去除即可。</p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;安装next主题&quot;&gt;&lt;a href=&quot;#安装next主题&quot; class=&quot;headerlink&quot; title=&quot;安装next主题&quot;&gt;&lt;/a&gt;安装next主题&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git clone https://github.com/theme-next/hexo-theme-next themes/next&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;启用主题&quot;&gt;&lt;a href=&quot;#启用主题&quot; class=&quot;headerlink&quot; title=&quot;启用主题&quot;&gt;&lt;/a&gt;启用主题&lt;/h4&gt;&lt;p&gt;修改博客根目录下的配置文件_config.yml:&lt;br&gt;
    
    </summary>
    
      <category term="hexo" scheme="https://shuisuinian.coding.me/categories/hexo/"/>
    
    
      <category term="hexo博客" scheme="https://shuisuinian.coding.me/tags/hexo%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>进阶管理hexo博客</title>
    <link href="https://shuisuinian.coding.me/archives/2002852375.html"/>
    <id>https://shuisuinian.coding.me/archives/2002852375.html</id>
    <published>2019-03-16T08:24:05.000Z</published>
    <updated>2019-03-18T04:26:56.383Z</updated>
    
    <content type="html"><![CDATA[<h2 id="进阶管理hexo博客"><a href="#进阶管理hexo博客" class="headerlink" title="进阶管理hexo博客"></a>进阶管理hexo博客</h2><p>这几天，重新安装windows系统，好多东西都要重新来过，太麻烦了，所以网上查找了一些解决方案并记录下来</p><h3 id="解决方案："><a href="#解决方案：" class="headerlink" title="解决方案："></a>解决方案：</h3><ol><li>在你的github上新建一个repository，然后把你的blog文件夹上传，进行备份，这个比较简单</li><li>在现有的shuisuinian.guthub.io的repository下创建一个分支来管理，具体操作步骤如下：</li></ol><hr><a id="more"></a><h3 id="具体操作："><a href="#具体操作：" class="headerlink" title="具体操作："></a>具体操作：</h3><ul><li><p>按本地磁盘（任意位置下，右键打开Git bash,将你的项目文件克隆到本地：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone git@github.com:shuisuinian/shuisuinian.github.io.git</span><br></pre></td></tr></table></figure></li><li><p>这时该目录下出现一个shuisuinian.github.io的文件夹，进入该文件夹，删除文件夹中除了.git的其他所有文件夹</p></li><li>把你的blog文件夹内的所有文件全部复制到shuisuinian.github.io/下</li><li>此时，应有一个名.gitignore的文件，如果没有则自己创建，内容如下：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">.DS_Store</span><br><span class="line">Thumbs.db</span><br><span class="line">db.json</span><br><span class="line">*.log</span><br><span class="line">node_modules/</span><br><span class="line">public/</span><br><span class="line">.deploy*/</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>说明：.gitignore文件就是为了指定哪些文件上传的时候可以忽略，因为blog/的文件并不全部都需要</p></blockquote><ul><li><p>用git命令创建一个叫hexo（任意命名）的分支，并切换到此分支：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b hexo</span><br></pre></td></tr></table></figure></li><li><p>以此输入以下命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add --all</span><br><span class="line">git commit -m &quot;注释&quot;</span><br><span class="line">git push --set-upstream origin hexo</span><br></pre></td></tr></table></figure></li></ul><h3 id="后续：发表更新博客及源文件"><a href="#后续：发表更新博客及源文件" class="headerlink" title="后续：发表更新博客及源文件"></a>后续：发表更新博客及源文件</h3><ul><li><p>git 提交三部曲</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// 更新源文件</span><br><span class="line">git add . #添加所有文件到暂存区</span><br><span class="line">git commit -m &quot;提交一篇博客&quot;  #提交</span><br><span class="line">git push origin hexo 推送hexo分支到github</span><br><span class="line">// 更新博客</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure></li><li><p>利用hexo把本地文章部署到了网站上，网站更新==shuisuinian.github.io下的master分支更新==blog/public/下文件更新，然后通过git三部曲把本地变更过的blog文件也备份到了shuisuinian.github.io下的hexo分支</p></li></ul><h3 id="今后换电脑或者重装系统后，安装基本软件环境后，cnpm安装依赖"><a href="#今后换电脑或者重装系统后，安装基本软件环境后，cnpm安装依赖" class="headerlink" title="今后换电脑或者重装系统后，安装基本软件环境后，cnpm安装依赖"></a>今后换电脑或者重装系统后，安装基本软件环境后，cnpm安装依赖</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone -b hexo git@github.com:shuisuinian/shuisuinian.github.io.git</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;进阶管理hexo博客&quot;&gt;&lt;a href=&quot;#进阶管理hexo博客&quot; class=&quot;headerlink&quot; title=&quot;进阶管理hexo博客&quot;&gt;&lt;/a&gt;进阶管理hexo博客&lt;/h2&gt;&lt;p&gt;这几天，重新安装windows系统，好多东西都要重新来过，太麻烦了，所以网上查找了一些解决方案并记录下来&lt;/p&gt;
&lt;h3 id=&quot;解决方案：&quot;&gt;&lt;a href=&quot;#解决方案：&quot; class=&quot;headerlink&quot; title=&quot;解决方案：&quot;&gt;&lt;/a&gt;解决方案：&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;在你的github上新建一个repository，然后把你的blog文件夹上传，进行备份，这个比较简单&lt;/li&gt;
&lt;li&gt;在现有的shuisuinian.guthub.io的repository下创建一个分支来管理，具体操作步骤如下：&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
    
    </summary>
    
      <category term="hexo" scheme="https://shuisuinian.coding.me/categories/hexo/"/>
    
    
      <category term="hexo博客" scheme="https://shuisuinian.coding.me/tags/hexo%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://shuisuinian.coding.me/archives/1243066710.html"/>
    <id>https://shuisuinian.coding.me/archives/1243066710.html</id>
    <published>2019-03-16T04:59:44.155Z</published>
    <updated>2019-03-18T04:26:56.376Z</updated>
    
    <content type="html"><![CDATA[<h2 id="欢迎进入wyf’s-blog"><a href="#欢迎进入wyf’s-blog" class="headerlink" title="欢迎进入wyf’s blog"></a>欢迎进入wyf’s blog</h2><p>Welcome to <a href="https://shuisuinian.coding.me/">wyf-Hexo-coding pages</a>!<br>Welcome to <a href="https://shuisuinian.github.io/" target="_blank" rel="noopener">wyf-Hexo-github pages</a>!</p><hr><a id="more"></a><h4 id="之后是第一次搭建hexo时自动创建"><a href="#之后是第一次搭建hexo时自动创建" class="headerlink" title="之后是第一次搭建hexo时自动创建"></a>之后是第一次搭建hexo时自动创建</h4><h2 id="hello-world"><a href="#hello-world" class="headerlink" title="hello world"></a>hello world</h2><p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;欢迎进入wyf’s-blog&quot;&gt;&lt;a href=&quot;#欢迎进入wyf’s-blog&quot; class=&quot;headerlink&quot; title=&quot;欢迎进入wyf’s blog&quot;&gt;&lt;/a&gt;欢迎进入wyf’s blog&lt;/h2&gt;&lt;p&gt;Welcome to &lt;a href=&quot;https://shuisuinian.coding.me/&quot;&gt;wyf-Hexo-coding pages&lt;/a&gt;!&lt;br&gt;Welcome to &lt;a href=&quot;https://shuisuinian.github.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;wyf-Hexo-github pages&lt;/a&gt;!&lt;/p&gt;
&lt;hr&gt;
    
    </summary>
    
      <category term="Hello World" scheme="https://shuisuinian.coding.me/categories/Hello-World/"/>
    
    
      <category term="Hello World" scheme="https://shuisuinian.coding.me/tags/Hello-World/"/>
    
  </entry>
  
  <entry>
    <title>单例设计模式</title>
    <link href="https://shuisuinian.coding.me/archives/3442686983.html"/>
    <id>https://shuisuinian.coding.me/archives/3442686983.html</id>
    <published>2019-03-09T16:12:11.000Z</published>
    <updated>2019-07-15T06:21:56.034Z</updated>
    
    <content type="html"><![CDATA[<h4 id="单例设计模式"><a href="#单例设计模式" class="headerlink" title="单例设计模式"></a>单例设计模式</h4><p>必须对于多个程序使用同一个配置信息对象时，就需要保证该对象的唯一性。</p><hr> <a id="more"></a><p> 1.如何保证对象的唯一性</p><ul><li>不允许该类创建一个本类实例</li><li>对该类创建一个本类实例</li><li><p>对外提供一个方法让其他程序可以获取该对象</p><p>2.步骤：</p><ul><li>私有化该类构造函数</li><li>通过new在本类中创建一个本类对象</li><li>定义一个公有的方法，将创建的对象返回</li></ul></li></ul><hr><p>3.例如：新建一个测试类<br>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">class Test&#123;</span><br><span class="line">    private int num;</span><br><span class="line">    </span><br><span class="line">    private static Test t = new Test();   //通过new在本类中创建一个本类对象</span><br><span class="line">    private Test()&#123;&#125;                                 //私有化构造函数</span><br><span class="line">    public static Test getInstance()&#123;     //定义一个公有的方法，将创建的对象返回</span><br><span class="line">        return t;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    public void setNum(int num)&#123;</span><br><span class="line">        this.num = num;</span><br><span class="line">    &#125;</span><br><span class="line">    public int getNum()&#123;</span><br><span class="line">        return num;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>如果在main中直接new两个对象</p><ul><li><p>方式1</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">class Demo&#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        Test t1 = new Test();</span><br><span class="line">        Test t2 = new Test();</span><br><span class="line">        t1.setNum(10);</span><br><span class="line">        t2.setNum(20);</span><br><span class="line">        System.out.println(t1.getNum());</span><br><span class="line">        System.out.println(t2.getNum());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">10</span><br><span class="line">20</span><br></pre></td></tr></table></figure><p>未达到内存中只有一个对象的要求</p><ul><li>方式2<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">class Demo&#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        Test t1 = Test.getInstance();</span><br><span class="line">        Test t2 = Test.getInstance();</span><br><span class="line">        t1.setNum(10);</span><br><span class="line">        t2.setNum(20);</span><br><span class="line">        System.out.println(t1.getNum());</span><br><span class="line">        System.out.println(t2.getNum());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>输出结果为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">20</span><br><span class="line">20</span><br></pre></td></tr></table></figure><p>利用此方法t1 t2操作的时同一个对象吗，所以满足内存了中只有一个对象的要求</p></li></ul><hr><p>4.饿汉式 （开发时常用）<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> class Single &#123; // 类一加载，对象就已经存在了</span><br><span class="line"> </span><br><span class="line">    private Static Single s = new Single();</span><br><span class="line">    </span><br><span class="line">    private Single()&#123;&#125;</span><br><span class="line">    </span><br><span class="line">    public static Single getInstance()&#123;</span><br><span class="line">        return s;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>5.懒汉式 (面试时较前者更常问)<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"> class Single2 &#123; // 类加载进来，没有对象，只有调用了getInstance方法时，才会创建对象</span><br><span class="line"> //延迟加载形式</span><br><span class="line"> </span><br><span class="line">    private Static Single2 s = null;</span><br><span class="line">    </span><br><span class="line">    private Single2()&#123;&#125;</span><br><span class="line">    </span><br><span class="line">    public static Single2 getInstance()&#123;</span><br><span class="line">        if(s==null)</span><br><span class="line">            s = new Single2();</span><br><span class="line">        return s;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;单例设计模式&quot;&gt;&lt;a href=&quot;#单例设计模式&quot; class=&quot;headerlink&quot; title=&quot;单例设计模式&quot;&gt;&lt;/a&gt;单例设计模式&lt;/h4&gt;&lt;p&gt;必须对于多个程序使用同一个配置信息对象时，就需要保证该对象的唯一性。&lt;/p&gt;
&lt;hr&gt;
    
    </summary>
    
      <category term="个人笔记" scheme="https://shuisuinian.coding.me/categories/%E4%B8%AA%E4%BA%BA%E7%AC%94%E8%AE%B0/"/>
    
      <category term="jee学习之路" scheme="https://shuisuinian.coding.me/categories/%E4%B8%AA%E4%BA%BA%E7%AC%94%E8%AE%B0/jee%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF/"/>
    
      <category term="javase" scheme="https://shuisuinian.coding.me/categories/%E4%B8%AA%E4%BA%BA%E7%AC%94%E8%AE%B0/jee%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF/javase/"/>
    
    
      <category term="javase" scheme="https://shuisuinian.coding.me/tags/javase/"/>
    
      <category term="设计模式" scheme="https://shuisuinian.coding.me/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>hexo创建</title>
    <link href="https://shuisuinian.coding.me/archives/469202525.html"/>
    <id>https://shuisuinian.coding.me/archives/469202525.html</id>
    <published>2019-03-09T01:01:00.000Z</published>
    <updated>2019-03-19T01:03:05.475Z</updated>
    
    <content type="html"><![CDATA[<h2 id="hexo-静态博客"><a href="#hexo-静态博客" class="headerlink" title="hexo 静态博客"></a>hexo 静态博客</h2><h4 id="1、-安装node-js"><a href="#1、-安装node-js" class="headerlink" title="1、 安装node.js"></a>1、 安装node.js</h4><p>直接在<a href="http://nodejs.cn/" target="_blank" rel="noopener">官网</a>下载 ，安装<br>首先验证是否安装成功<br>进入cmd（快捷键 win+R，输入cmd），或者git bash</p><hr><a id="more"></a><p><img src="https://i.loli.net/2019/03/19/5c90367ccd898.png" alt><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure></p><p><img src="https://i.loli.net/2019/03/19/5c903f67abd7a.png" alt><br>出现版本号XXX 就是安装没有问题（一般也不会出现问题的）</p><h4 id="2、更换源（改为淘宝源）"><a href="#2、更换源（改为淘宝源）" class="headerlink" title="2、更换源（改为淘宝源）"></a>2、更换源（改为淘宝源）</h4><blockquote><p>直接npm比较慢，所以安装cnpm，这样会快些<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure></p></blockquote><p>键入命令后回车<br><code>cnpm -v</code>  进行验证 ,和上面验证一个意思，就不截图了</p><h4 id="3、现在使用cnpm-来安装hexo博客框架"><a href="#3、现在使用cnpm-来安装hexo博客框架" class="headerlink" title="3、现在使用cnpm 来安装hexo博客框架"></a>3、现在使用cnpm 来安装hexo博客框架</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install -g hexo-cli</span><br></pre></td></tr></table></figure><p><code>hexo -v</code>   进行验证</p><h4 id="4、新建一个文件夹blog进入该文件夹，再执行命令"><a href="#4、新建一个文件夹blog进入该文件夹，再执行命令" class="headerlink" title="4、新建一个文件夹blog进入该文件夹，再执行命令"></a>4、新建一个文件夹blog进入该文件夹，再执行命令</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir blog  //新建文件夹blog 文件夹名自己随意就好</span><br><span class="line">cd blog     //进入该文件夹</span><br><span class="line">hexo init   //在这个文件夹建立hexo博客</span><br></pre></td></tr></table></figure><p>等待一段时间安装 出现<code>Start blogging with Hwxo!</code>表示安装成功<br>之后就算出现什么问题，直接删掉这个文件夹，重来就好</p><blockquote><p>后面的操作都是在这个新建的blog目录下，就算出现什么问题，直接删掉这个文件夹，重来就好</p></blockquote><h4 id="5、启动博客"><a href="#5、启动博客" class="headerlink" title="5、启动博客"></a>5、启动博客</h4><p><code>hexo s</code><br><img src="https://i.loli.net/2019/03/19/5c903f67a0b8e.png" alt><br>浏览器进入 <code>localhost:4000</code> 发现有一个默认创建的文章<br>(我这里目录不一样，是在之后做了修改)</p><h4 id="6、新建博文"><a href="#6、新建博文" class="headerlink" title="6、新建博文"></a>6、新建博文</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo n &quot;我的第一篇hexo文章”</span><br></pre></td></tr></table></figure><p>可以发现在目录/blog/source/_psots文件夹下 多出一个<br>“我的第一篇hexo文章.md” 的文件，这里是markdown格式的，大家可以花个几分钟去学习一下语法，比较简单。</p><h4 id="7、部署到github上"><a href="#7、部署到github上" class="headerlink" title="7、部署到github上"></a>7、部署到github上</h4><p>在github里新建一个repostory命名  ！！！！<br>你的用户名.github.io<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 例如我的</span><br><span class="line">shuisuinian.github.io</span><br></pre></td></tr></table></figure></p><h4 id="8、安装插件，并修改-config-yml文件"><a href="#8、安装插件，并修改-config-yml文件" class="headerlink" title="8、安装插件，并修改_config.yml文件"></a>8、安装插件，并修改_config.yml文件</h4><p>还是 cmd 进入blog目录下<br><code>cnpm install --save hexo-deployer-git</code><br> 安装时有个 peerDependencies WARNING  不用管<br> 设置_config.yml 文件（这个文件就在blog根目录下的）<br> 找到这一段<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> # Deployment</span><br><span class="line">## Docs: https://hexo.io/docs/deployment.html</span><br></pre></td></tr></table></figure></p><p>修改：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> # Deployment</span><br><span class="line">## Docs: https://hexo.io/docs/deployment.html</span><br><span class="line">deploy:</span><br><span class="line"> type: git</span><br><span class="line"> repo: https://github.com/你的用户名/你的用户名.github.io.git</span><br><span class="line"> banch: master</span><br></pre></td></tr></table></figure></p><p> 设置完成后推送到github，依次执行<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure></p><blockquote><p>这里可能会出现的问题是：你以前安装完git，没有配置信息等一些问题，如果有问题，大家可以百度一下</p></blockquote><h4 id="9、更换主题"><a href="#9、更换主题" class="headerlink" title="9、更换主题"></a>9、更换主题</h4><p>  <code>git clone https://github.com/litten/hexo-theme-yilia.git. themes/yilia</code><br>  修改 之前的_config.yml<br>  找到  theme 这行 修改为<code>theme: yilia</code><br>  执行以下命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo s</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;hexo-静态博客&quot;&gt;&lt;a href=&quot;#hexo-静态博客&quot; class=&quot;headerlink&quot; title=&quot;hexo 静态博客&quot;&gt;&lt;/a&gt;hexo 静态博客&lt;/h2&gt;&lt;h4 id=&quot;1、-安装node-js&quot;&gt;&lt;a href=&quot;#1、-安装node-js&quot; class=&quot;headerlink&quot; title=&quot;1、 安装node.js&quot;&gt;&lt;/a&gt;1、 安装node.js&lt;/h4&gt;&lt;p&gt;直接在&lt;a href=&quot;http://nodejs.cn/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;官网&lt;/a&gt;下载 ，安装&lt;br&gt;首先验证是否安装成功&lt;br&gt;进入cmd（快捷键 win+R，输入cmd），或者git bash&lt;/p&gt;
&lt;hr&gt;
    
    </summary>
    
      <category term="hexo" scheme="https://shuisuinian.coding.me/categories/hexo/"/>
    
    
      <category term="hexo博客" scheme="https://shuisuinian.coding.me/tags/hexo%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
</feed>
