<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>wyf-Hexo</title>
  
  <subtitle>wyf&#39;s personal blog &lt;br&gt; wyf 的个人博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://shuisuinian.coding.me/"/>
  <updated>2019-05-27T12:20:29.738Z</updated>
  <id>https://shuisuinian.coding.me/</id>
  
  <author>
    <name>ShuiSui</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JavaScript</title>
    <link href="https://shuisuinian.coding.me/archives/3424359953.html"/>
    <id>https://shuisuinian.coding.me/archives/3424359953.html</id>
    <published>2019-05-27T12:01:01.000Z</published>
    <updated>2019-05-27T12:20:29.738Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h1><h2 id="什么是JavaScript（js）"><a href="#什么是JavaScript（js）" class="headerlink" title="什么是JavaScript（js）"></a>什么是JavaScript（js）</h2><ol><li>js是浏览器客户端的一种语言（浏览器是js程序的运行时的环境）</li><li>js主要的作用就是用来操作html、css</li><li>网页中的特效代码都是用js实现的</li></ol><a id="more"></a><blockquote><p>例如：<br>悬浮广告<br>轮播图</p></blockquote><h2 id="JavaScript的组成"><a href="#JavaScript的组成" class="headerlink" title="JavaScript的组成"></a>JavaScript的组成</h2><ol><li>ecmascript<br> js的基本语法：for，while，dowhile循环<br> if语句，数组，变量，数据类型</li><li>document操作<br> html，css的操作</li><li>bom<br> 浏览器窗口的一些操作<br> 回到上一页，下一页<br> 弹窗</li></ol><h2 id="js脚本的使用方式"><a href="#js脚本的使用方式" class="headerlink" title="js脚本的使用方式"></a>js脚本的使用方式</h2><ol><li><p>在html的文件内部的任意地方加入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">        //代码部分</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li><li><p>链接外部js文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=&quot;外部js文件&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure></li><li><p>简短缩写方式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=&quot;javascript:js代码&quot;&gt;a的js应用&lt;/a&gt;</span><br></pre></td></tr></table></figure></li></ol><h2 id="JavaScript-能够以不同方式“显示”数据"><a href="#JavaScript-能够以不同方式“显示”数据" class="headerlink" title="JavaScript 能够以不同方式“显示”数据"></a>JavaScript 能够以不同方式“显示”数据</h2><ol><li>使用 window.alert() 写入警告框</li><li>使用 document.write() 写入 HTML 输出</li><li>使用 console.log() 写入浏览器控制台</li><li>使用 innerHTML 写入 HTML 元素</li></ol><h2 id="变量的使用和声明"><a href="#变量的使用和声明" class="headerlink" title="变量的使用和声明"></a>变量的使用和声明</h2><h3 id="js中定义变量"><a href="#js中定义变量" class="headerlink" title="js中定义变量"></a>js中定义变量</h3><ol><li>统一用关键字var</li><li>或者直接使用变量，无需定义</li></ol><h3 id="js中变量的声明和赋值"><a href="#js中变量的声明和赋值" class="headerlink" title="js中变量的声明和赋值"></a>js中变量的声明和赋值</h3><ol><li><p>只定义没有赋值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var width，height;</span><br><span class="line">width=5;//之后单独赋值</span><br><span class="line">height=10;</span><br></pre></td></tr></table></figure></li><li><p>定义并且同时赋值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var width=5,height=10;</span><br></pre></td></tr></table></figure></li><li><p>不定义直接赋值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">height = 999 ;</span><br></pre></td></tr></table></figure></li></ol><h2 id="js的几种数据类型"><a href="#js的几种数据类型" class="headerlink" title="js的几种数据类型"></a>js的几种数据类型</h2><ol><li>undefined 未定义<br> 一个变量没有赋值</li><li>boolean<br> 只有true/false两种值</li><li>number 数字类型（整数或小数）</li><li>string 字符串类型<br> 一般情况string都是用双引号或者单引号括起来</li><li>object 对象类型</li></ol><blockquote><p>typeof() 可以检测变量数据类型<br>以下例子：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var a;//没有赋值，undefined类型</span><br><span class="line">var b = 12.2;//number类型</span><br><span class="line">var c = &quot;12.2&quot;;//string类型</span><br><span class="line">var is = true;//boolean类型</span><br><span class="line">var n = null;//object类型</span><br><span class="line">document.write(typeof(a));//检测a的数据类型类型</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="字符串的-双引号问题"><a href="#字符串的-双引号问题" class="headerlink" title="字符串的 双引号问题"></a>字符串的 双引号问题</h3><blockquote><p>在一个双引号字符串之间如果要加入双引号<br>有三种方法：<br>1：不加双引号：没有严重的影响(不推荐)<br>2：用单引号代替<br>3：用转义字符-&gt; \”</p><blockquote><p>例1：</p></blockquote></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//用转义字符</span><br><span class="line">var str = &quot;&lt;div style=\&quot;width:&quot;+a+&quot;px\&quot;&gt;&lt;/div&gt;&quot;;</span><br><span class="line">//用单引号代替</span><br><span class="line">var str2 = &quot;&lt;div style=&apos;width:&quot;+a+&quot;px&apos;&gt;&lt;/div&gt;&quot;;</span><br></pre></td></tr></table></figure><blockquote><blockquote><p>例2:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var a = 100;</span><br><span class="line">var str = &quot;&lt;div style=\&quot;&quot;+</span><br><span class="line">        &quot;width:&quot; + a + &quot;px;&quot;+</span><br><span class="line">        &quot;height: 100px;&quot; +</span><br><span class="line">        &quot;border: 1px solid red;&quot;+</span><br><span class="line">        &quot;\&quot;&gt;&lt;/div&gt;&quot;;</span><br><span class="line">document.write(str);</span><br></pre></td></tr></table></figure></p></blockquote></blockquote><blockquote><blockquote><p>例2效果：</p></blockquote></blockquote><h2 id="javascript运算符"><a href="#javascript运算符" class="headerlink" title="javascript运算符"></a>javascript运算符</h2><table><thead><tr><th>算数运算符</th><th>+</th><th>-</th><th>*</th><th>/</th><th>%</th><th>++</th><th>–</th></tr></thead><tbody><tr><td>赋值运算符</td><td>=</td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>比较运算符</td><td>&lt;</td><td>&gt;</td><td>&lt;=</td><td>&gt;=</td><td>==</td><td>!=</td><td>===</td></tr><tr><td>逻辑运算符</td><td>&amp;&amp;</td><td>&#124;  &#124;</td><td>!</td><td></td><td></td><td></td><td></td></tr></tbody></table><p>在一个js的运算表达式中，如果都是number类型，则整个结果也是number类型<br>表达式是从左到右开始运算，一旦遇到字符串，则后面的运算全部是字符串连接</p><blockquote><p>例1</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">var x = 3;</span><br><span class="line">var y = 5;</span><br><span class="line">var z = 10;</span><br><span class="line">var ch = &quot;字符&quot;;</span><br><span class="line">document.write(x + z + ch + x + z+&quot;&lt;br/&gt;&quot;);</span><br><span class="line">var n = null;</span><br><span class="line">n = z/x;</span><br><span class="line">document.write(&quot;n=&quot;+n+&quot;:&quot;+typeof(n)+&quot;&lt;br/&gt;&quot;);</span><br><span class="line">//除法 10/3会得到小数  而不是 3</span><br></pre></td></tr></table></figure><blockquote><p>例1结果：后面的x+z 变为了字符连接。如下图</p></blockquote><p><img src="https://i.loli.net/2019/05/27/5cebd5fbb494021584.png" alt></p><blockquote><p>例2<br>关于 表达式简写 下面以 + 为例（+ - * / % 用法一样）</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var z = 10;</span><br><span class="line">var n = 1;</span><br><span class="line">n = n + 1;</span><br><span class="line">document.write(&quot;n=&quot;+ n + &quot;,&quot; +&quot;&lt;br/&gt;&quot;);</span><br><span class="line">var n = 1;</span><br><span class="line">n += 1;</span><br><span class="line">document.write(&quot;n=&quot;+ n + &quot;,&quot; +&quot;&lt;br/&gt;&quot;);</span><br></pre></td></tr></table></figure><blockquote><p>例2结果：</p></blockquote><p><img src="https://i.loli.net/2019/05/27/5cebd5fbd20d942789.png" alt></p><blockquote><p>例3<br>自增运算符：++ （自减运算符：–，用法一样）</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">n = z++;//先把z的值赋值给n，再自己加1</span><br><span class="line">document.write(n + &quot;,&quot; + z +&quot;&lt;br/&gt;&quot;);</span><br><span class="line">n = ++z;//z先加1，再赋值给n</span><br><span class="line">document.write(n + &quot;,&quot; + z +&quot;&lt;br/&gt;&quot;);</span><br></pre></td></tr></table></figure><blockquote><p>例3结果：</p></blockquote><p><img src="https://i.loli.net/2019/05/27/5cebd5fc8adb643338.png" alt></p><blockquote><p>例4<br>js中对于 == 和 ===的区别</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var i=2;</span><br><span class="line">var ch = &quot;2&quot;</span><br><span class="line">document.write(i==ch);//显示true</span><br><span class="line">document.write(&quot;&lt;br/&gt;&quot;);//换个行</span><br><span class="line">document.write(i === ch);//显示false</span><br><span class="line">//===会先判断类型是否相等</span><br></pre></td></tr></table></figure><blockquote><p>例4结果:<br><img src="https://i.loli.net/2019/05/27/5cebd5fbb48f662653.png" alt></p></blockquote><h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><ol><li>&amp;&amp; 逻辑与<br> true &amp;&amp; true 表达式返回true<br> 两边都为真 返回真</li><li>|| 逻辑或<br> false &amp;&amp; true 表达式返回true<br> 只要一边为真 返回真</li><li>！逻辑非<br> !true 返回假<br> !false 返回真<br> 真变成假<br> 假变成真</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;JavaScript&quot;&gt;&lt;a href=&quot;#JavaScript&quot; class=&quot;headerlink&quot; title=&quot;JavaScript&quot;&gt;&lt;/a&gt;JavaScript&lt;/h1&gt;&lt;h2 id=&quot;什么是JavaScript（js）&quot;&gt;&lt;a href=&quot;#什么是JavaScript（js）&quot; class=&quot;headerlink&quot; title=&quot;什么是JavaScript（js）&quot;&gt;&lt;/a&gt;什么是JavaScript（js）&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;js是浏览器客户端的一种语言（浏览器是js程序的运行时的环境）&lt;/li&gt;
&lt;li&gt;js主要的作用就是用来操作html、css&lt;/li&gt;
&lt;li&gt;网页中的特效代码都是用js实现的&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="jee学习之路" scheme="https://shuisuinian.coding.me/categories/jee%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF/"/>
    
    
      <category term="js" scheme="https://shuisuinian.coding.me/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>CSS</title>
    <link href="https://shuisuinian.coding.me/archives/3999917138.html"/>
    <id>https://shuisuinian.coding.me/archives/3999917138.html</id>
    <published>2019-05-22T11:47:01.000Z</published>
    <updated>2019-05-23T00:37:21.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="css"><a href="#css" class="headerlink" title="css"></a>css</h3><h4 id="css的作用"><a href="#css的作用" class="headerlink" title="css的作用"></a>css的作用</h4><ol><li>美化网页</li><li>设置字体的大小</li><li>设置容器的位置，大小</li><li>设置图片</li></ol><a id="more"></a><h4 id="写css样式的方法"><a href="#写css样式的方法" class="headerlink" title="写css样式的方法"></a>写css样式的方法</h4><ol><li>内部样式<br> 在head标签里面加上 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;style type=&quot;text/css&quot;&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure></li></ol><ol start="2"><li>行内样式<br> 在标签里面加上style=””</li><li>外部样式<br> 连接一个专门的css文件</li></ol><h4 id="css基本语法"><a href="#css基本语法" class="headerlink" title="css基本语法"></a>css基本语法</h4><p> 选择器(即要修饰的对象){<br>    css属性1:属性值1;<br>    css属性2:属性值2;<br> }</p><blockquote><p>例如：<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">p&#123; </span><br><span class="line">    border-radius: 2.5em;    </span><br><span class="line">    background-color: rgba(255, 169, 88, 0.12);    </span><br><span class="line">    text-align: center;    </span><br><span class="line">    font-size: 13px;/*改变字体大小*/    </span><br><span class="line">    color: red;/*改变字体颜色*/</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><h5 id="选择器的分类"><a href="#选择器的分类" class="headerlink" title="选择器的分类"></a>选择器的分类</h5><ol><li>标签选择器</li><li><p>类选择器<br> 给标签取个class名字<br> css用<br> .class名{<br> }</p><blockquote><p>例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">.li1&#123;    </span><br><span class="line">font-size: 20px;    </span><br><span class="line">color: #000;    </span><br><span class="line">font-family: 华文宋体;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote></li><li><p>id选择器<br> 给标签取个唯一id<br> css用<br> #id{<br> }</p><blockquote><p>例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#li1&#123;    </span><br><span class="line">text-decoration: overline;    </span><br><span class="line">font-size: 16px;    </span><br><span class="line">letter-spacing: 15px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote></li></ol><ol start="4"><li>后代选择器<br> 选择该元素的所有后代,无论第几代</li><li>子代选择器<br> 只选择第一代</li><li>兄弟选择器<br> 查找id=li1的元素后面的<br>所有兄弟元</li><li>相邻兄弟选择器<br> 查找id=li1的元素后面的第一个为li标签的兄弟元<h6 id="优先级"><a href="#优先级" class="headerlink" title="优先级"></a>优先级</h6>id&gt;class&gt;子代&gt;后代</li></ol><h4 id="css属性"><a href="#css属性" class="headerlink" title="css属性"></a>css属性</h4><h5 id="文本属性"><a href="#文本属性" class="headerlink" title="文本属性"></a>文本属性</h5><blockquote><p>font-family:字体<br>Font-size:字体大小<br>Font-weight:是否加粗<br>color设置颜色<br>Text-indent:首行缩进<br>text-align：center/left/right对齐<br>Line-height:最主要的作用是设置文字相对容器垂直居中如果line-height等于height，文字就会垂直居中<br>white-space: pre;/<em>保留空白字符</em>/<br>white-space: normal;/<em>忽略空白字符</em>/</p></blockquote><h5 id="背景属性"><a href="#背景属性" class="headerlink" title="背景属性"></a>背景属性</h5><blockquote><p>Background-color:背景颜色<br>Background-image:url(“图片地址”)背景图片<br>Background-repeat:（背景重复方式）<br>repeat（重复，默认）<br>no-repeat(不重复)<br>Repeat-x（x轴上重复）<br>Repeat-y（y轴上重复）<br>Background-positionn: -20px  10px (控制背景图片的位置，将背景图片向左偏移20px，向下偏移10px)</p></blockquote><h5 id="其他属性"><a href="#其他属性" class="headerlink" title="其他属性"></a>其他属性</h5><blockquote><p>text-decoration：（加下划线）<br>underline下划线<br>line-through 删除线<br>overline 上划线<br>none 不需要线<br>letter-spacing:（设置文字之间的间距）数字px;</p></blockquote><blockquote><p>list-style：none；（去掉li前的圆心）<br>square;(改为矩形矩形)<br>circle；（空心圆）<br>disc；（实心圆，默认）</p></blockquote><h4 id="盒子模型"><a href="#盒子模型" class="headerlink" title="盒子模型"></a>盒子模型</h4><p>一个盒子（容器）是由4部分组成的：</p><ol><li>里面的内容（元素内容）</li><li><p>內边距（容器与内容之间的距离）<br> padding设置</p><ul><li>padding-left:</li><li>padding-top:</li><li>padding-right:</li><li>padding-bottom:</li><li>缩写形式1：padding：10px,10px,10px,10px;(上右下左)</li><li>缩写形式2：padding：10px,20px;(上下10，左右20)</li></ul></li><li><p>外边距（容器与外部的距离）<br> margin设置</p><ul><li>margin-left:</li><li>margin-top:</li><li>margin-right:</li><li>margin-bottom:</li><li>缩写形式：margin：10px,10px,10px,10px;(上右下左)</li><li>缩写形式2：margin：10px,20px;(上下10，左右20)</li></ul></li><li>边框（边框线）<br> border设置</li></ol><blockquote><p>例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.box&#123;    </span><br><span class="line">    width: 300px;    </span><br><span class="line">    height: 200px;    </span><br><span class="line">    border: 1px solid red;    </span><br><span class="line">    padding-left: 20px;    </span><br><span class="line">    padding-top: 20px;    </span><br><span class="line">    margin-top: 30px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>常用水平居中的方法：（容器相对于外部容器）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">.box&#123;    </span><br><span class="line">    width: 300px;    </span><br><span class="line">    height: 200px;    </span><br><span class="line">    margin: 0px auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>容器的实际宽高=css设置的宽高+边框的大小+padding</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;css&quot;&gt;&lt;a href=&quot;#css&quot; class=&quot;headerlink&quot; title=&quot;css&quot;&gt;&lt;/a&gt;css&lt;/h3&gt;&lt;h4 id=&quot;css的作用&quot;&gt;&lt;a href=&quot;#css的作用&quot; class=&quot;headerlink&quot; title=&quot;css的作用&quot;&gt;&lt;/a&gt;css的作用&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;美化网页&lt;/li&gt;
&lt;li&gt;设置字体的大小&lt;/li&gt;
&lt;li&gt;设置容器的位置，大小&lt;/li&gt;
&lt;li&gt;设置图片&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="jee学习之路" scheme="https://shuisuinian.coding.me/categories/jee%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF/"/>
    
    
      <category term="html" scheme="https://shuisuinian.coding.me/tags/html/"/>
    
      <category term="css" scheme="https://shuisuinian.coding.me/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>什么是HTML</title>
    <link href="https://shuisuinian.coding.me/archives/625187715.html"/>
    <id>https://shuisuinian.coding.me/archives/625187715.html</id>
    <published>2019-05-21T10:27:25.000Z</published>
    <updated>2019-05-21T12:34:31.426Z</updated>
    
    <content type="html"><![CDATA[<h3 id="什么是HTML"><a href="#什么是HTML" class="headerlink" title="什么是HTML"></a>什么是HTML</h3><ul><li>html是超文本标记语言</li><li>html就是用来做网站前端的</li></ul><blockquote><blockquote><p>偏硬件</p></blockquote><p>汇编语言<br>c语言<br>c++</p></blockquote><blockquote><blockquote><p>偏向应用</p></blockquote><p>java:网站应用系统。数据分析，安卓的app<br>c#</p></blockquote><ul><li>浏览器： ”解释和执行“HTML的工具</li><li>html主要有若干个标签组成：<a id="more"></a></li></ul><h5 id="html标签分为块状标签和行级标签"><a href="#html标签分为块状标签和行级标签" class="headerlink" title="html标签分为块状标签和行级标签"></a>html标签分为块状标签和行级标签</h5><ol><li>块状标签: 独占一行或者前后隔一空行</li></ol><p></p><h1>标题h1</h1><p></p><p></p><h2>标题h2</h2><p></p><p></p><h3>标题h3</h3><p></p><p></p><h4>标题h4</h4><p></p><p></p><h5>标题h5</h5><p></p><p></p><h6>标题h6</h6><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;h1&gt;标题h1&lt;/h1&gt;</span><br><span class="line">&lt;h2&gt;标题h2&lt;/h2&gt;</span><br><span class="line">&lt;h3&gt;标题h3&lt;/h3&gt;</span><br><span class="line">&lt;h4&gt;标题h4&lt;/h4&gt;</span><br><span class="line">&lt;h5&gt;标题h5&lt;/h5&gt;</span><br><span class="line">&lt;h6&gt;标题h6&lt;/h6&gt;</span><br></pre></td></tr></table></figure><p></p><p></p><p>段落标签</p><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;p&gt;段落标签&lt;/p&gt;</span><br></pre></td></tr></table></figure><p></p><p>水平线标签</p><p><hr><!--水平线标签--><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;hr&gt;</span><br></pre></td></tr></table></figure></p><blockquote><p>段落标签和h标签的区别是：<br>1：h标签字体加粗加大<br>2：p段落标签是网页默认字体</p></blockquote><p>有序列表标签</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;ol&gt;</span><br><span class="line">&lt;li&gt;淘宝&lt;/li&gt;</span><br><span class="line">&lt;li&gt;京东&lt;/li&gt;</span><br><span class="line">&lt;/ol&gt;</span><br></pre></td></tr></table></figure><p>无序列表标签<br>如：</p><p><ul></ul></p><p><li>淘宝</li></p><p><li>京东</li><br><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul&gt;</span><br><span class="line">&lt;li&gt;淘宝&lt;/li&gt;</span><br><span class="line">&lt;li&gt;京东&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure></p><p><dl></dl></p><p><dt>商品某某</dt></p><p><dd>价格：199</dd></p><p><dd>库存：99</dd><br><br>定义描述标签<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dl&gt;</span><br><span class="line">&lt;dt&gt;商品某某&lt;/dt&gt;</span><br><span class="line">&lt;dd&gt;价格：199&lt;/dd&gt;</span><br><span class="line">&lt;dd&gt;库存：99&lt;/dd&gt;</span><br><span class="line">&lt;/dl&gt;</span><br></pre></td></tr></table></figure></p><p>表格标签<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;table&gt;</span><br><span class="line">&lt;tr&gt;</span><br><span class="line">&lt;td&gt;&lt;/td&gt;</span><br><span class="line">&lt;/tr&gt;</span><br><span class="line">&lt;/table&gt;</span><br></pre></td></tr></table></figure></p><h5 id="行级标签：不独占一行"><a href="#行级标签：不独占一行" class="headerlink" title="行级标签：不独占一行"></a>行级标签：不独占一行</h5><p>图像标签：在网页中插入图片<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=&quot;../images/b2.jpg&quot; alt=&quot;图片&quot; width=&quot;250&quot; height=&quot;250&quot; title=&quot;ssss&quot;&gt;</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;span&gt;&lt;/span&gt;范围标签</span><br><span class="line">&lt;br/&gt;换行标签</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;什么是HTML&quot;&gt;&lt;a href=&quot;#什么是HTML&quot; class=&quot;headerlink&quot; title=&quot;什么是HTML&quot;&gt;&lt;/a&gt;什么是HTML&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;html是超文本标记语言&lt;/li&gt;
&lt;li&gt;html就是用来做网站前端的&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;偏硬件&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;汇编语言&lt;br&gt;c语言&lt;br&gt;c++&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;偏向应用&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;java:网站应用系统。数据分析，安卓的app&lt;br&gt;c#&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;浏览器： ”解释和执行“HTML的工具&lt;/li&gt;
&lt;li&gt;html主要有若干个标签组成：
    
    </summary>
    
      <category term="jee学习之路" scheme="https://shuisuinian.coding.me/categories/jee%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF/"/>
    
    
      <category term="html" scheme="https://shuisuinian.coding.me/tags/html/"/>
    
  </entry>
  
  <entry>
    <title>习惯的开始</title>
    <link href="https://shuisuinian.coding.me/archives/3717175919.html"/>
    <id>https://shuisuinian.coding.me/archives/3717175919.html</id>
    <published>2019-05-21T06:49:11.000Z</published>
    <updated>2019-05-21T06:55:37.781Z</updated>
    
    <content type="html"><![CDATA[<h4 id="习惯的开始"><a href="#习惯的开始" class="headerlink" title="习惯的开始"></a>习惯的开始</h4><p>最近开始在系统的学习jee了，争取每几节课都能给自己做个知识总结，或者说是笔记，备忘吧！试着开始这样的学习希望能坚持一点时间</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;习惯的开始&quot;&gt;&lt;a href=&quot;#习惯的开始&quot; class=&quot;headerlink&quot; title=&quot;习惯的开始&quot;&gt;&lt;/a&gt;习惯的开始&lt;/h4&gt;&lt;p&gt;最近开始在系统的学习jee了，争取每几节课都能给自己做个知识总结，或者说是笔记，备忘吧！试着开始这样的学习希望能坚持
      
    
    </summary>
    
      <category term="jee学习之路" scheme="https://shuisuinian.coding.me/categories/jee%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF/"/>
    
    
      <category term="html" scheme="https://shuisuinian.coding.me/tags/html/"/>
    
  </entry>
  
  <entry>
    <title>oracle10g在win7下的安装</title>
    <link href="https://shuisuinian.coding.me/archives/2261899728.html"/>
    <id>https://shuisuinian.coding.me/archives/2261899728.html</id>
    <published>2019-03-16T12:00:31.000Z</published>
    <updated>2019-03-27T02:55:13.833Z</updated>
    
    <content type="html"><![CDATA[<h2 id="oracle10g在win7x64下的安装"><a href="#oracle10g在win7x64下的安装" class="headerlink" title="oracle10g在win7x64下的安装"></a>oracle10g在win7x64下的安装</h2><blockquote><p>最近学oracle数据库，教的是10g版的，先试着安装</p></blockquote><a id="more"></a><ul><li><p>下载合适的版本，官网上10g版本现在是找不到下载的，大家可以自行百度（这里给些链接，复制链接到迅雷下载）</p><p><a href="http://download.oracle.com/otn/nt/oracle10g/10201/102010_win64_x64_database.zip" target="_blank" rel="noopener">http://download.oracle.com/otn/nt/oracle10g/10201/102010_win64_x64_database.zip</a> </p><p>如果是win7 64位,可能上面的版本还是无法安装，需要下载下面的这个版本:  <a href="http://download.oracle.com/otn/nt/oracle10g/10204/10204_vista_w2k8_x64_production_db.zip" target="_blank" rel="noopener">http://download.oracle.com/otn/nt/oracle10g/10204/10204_vista_w2k8_x64_production_db.zip</a></p></li><li><p>下载之后，如果直接安装还是会出问题的，所以在安装之前需要修改一些文件</p><ol><li>解压安装包，进入安装包目录</li><li>进入 安装包/database/install/ 路径下</li><li><p>修改oraparam.ini文件，找到 Windows=5.0,5.1,5.2,6.0<br>修改如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CERTIFIED_VERSION_FAILURE_MESSAGE</span><br><span class="line">Windows=5.0,5.1,5.2,6.0,6.1</span><br></pre></td></tr></table></figure></li><li><p>在安装包搜索 refhost.xml 文件，搜索到两个文件，都需要修改，如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--Microsoft Windows Vista--&gt;</span><br><span class="line">&lt;OPERATING_SYSTEM&gt;</span><br><span class="line">  &lt;VERSION VALUE=&quot;6.0&quot;/&gt;</span><br><span class="line">&lt;/OPERATING_SYSTEM&gt;</span><br><span class="line">&lt;OPERATING_SYSTEM&gt;</span><br><span class="line">  &lt;VERSION VALUE=&quot;6.1&quot;/&gt;</span><br><span class="line">&lt;/OPERATING_SYSTEM&gt;</span><br></pre></td></tr></table></figure></li></ol><blockquote><p>说明：6.1表示windows的内核版本，Windows 7的内核版本号为6.1</p></blockquote></li><li><p>修改完成后 ，再去安装基本不会出问题。<br>不过我安装的时候，报错：启动 Database Control 时出错，导致OracleDBConsoleorcl（数据库控制台服务）没有开启，使用时发现OEM无法使用，只能用iSQLplus和SQLplus工具<br>以前安装12c的时候按照网上教程倒没有什么问题，不知道哪里还需要修改的。<br>emmm…先这样吧。。</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;oracle10g在win7x64下的安装&quot;&gt;&lt;a href=&quot;#oracle10g在win7x64下的安装&quot; class=&quot;headerlink&quot; title=&quot;oracle10g在win7x64下的安装&quot;&gt;&lt;/a&gt;oracle10g在win7x64下的安装&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;最近学oracle数据库，教的是10g版的，先试着安装&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="数据库" scheme="https://shuisuinian.coding.me/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="数据库" scheme="https://shuisuinian.coding.me/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="oracle" scheme="https://shuisuinian.coding.me/tags/oracle/"/>
    
  </entry>
  
  <entry>
    <title>hexo+Next主题</title>
    <link href="https://shuisuinian.coding.me/archives/524570569.html"/>
    <id>https://shuisuinian.coding.me/archives/524570569.html</id>
    <published>2019-03-16T08:57:35.000Z</published>
    <updated>2019-03-18T04:26:56.385Z</updated>
    
    <content type="html"><![CDATA[<h4 id="安装next主题"><a href="#安装next主题" class="headerlink" title="安装next主题"></a>安装next主题</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/theme-next/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure><h4 id="启用主题"><a href="#启用主题" class="headerlink" title="启用主题"></a>启用主题</h4><p>修改博客根目录下的配置文件_config.yml:<br><a id="more"></a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># Extensions</span><br><span class="line">## Plugins: https://hexo.io/plugins/</span><br><span class="line">## Themes: https://hexo.io/themes/</span><br><span class="line">theme: next</span><br></pre></td></tr></table></figure></p><h4 id="主题设定"><a href="#主题设定" class="headerlink" title="主题设定"></a>主题设定</h4><p>修改Next目录下的配置文件_config.yml:<br>搜索字段：Scheme 可找到以下内容：</p><ul><li>Muse - 默认 Scheme，这是 NexT 最初的版本，黑白主调，大量留白</li><li>Mist - Muse 的紧凑版本，整洁有序的单栏外观</li><li>Pisces - 双栏 Scheme，小家碧玉似的清新</li><li>Gemini - 左侧网站信息及目录，块+片段结构布局</li></ul><p>Scheme 的切换通过更改 主题配置文件，搜索 scheme 关键字。 你会看到有四行 scheme 的配置，将你需用启用的 scheme 前面注释 # 去除即可。</p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;安装next主题&quot;&gt;&lt;a href=&quot;#安装next主题&quot; class=&quot;headerlink&quot; title=&quot;安装next主题&quot;&gt;&lt;/a&gt;安装next主题&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git clone https://github.com/theme-next/hexo-theme-next themes/next&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;启用主题&quot;&gt;&lt;a href=&quot;#启用主题&quot; class=&quot;headerlink&quot; title=&quot;启用主题&quot;&gt;&lt;/a&gt;启用主题&lt;/h4&gt;&lt;p&gt;修改博客根目录下的配置文件_config.yml:&lt;br&gt;
    
    </summary>
    
      <category term="hexo" scheme="https://shuisuinian.coding.me/categories/hexo/"/>
    
    
      <category term="hexo博客" scheme="https://shuisuinian.coding.me/tags/hexo%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>进阶管理hexo博客</title>
    <link href="https://shuisuinian.coding.me/archives/2002852375.html"/>
    <id>https://shuisuinian.coding.me/archives/2002852375.html</id>
    <published>2019-03-16T08:24:05.000Z</published>
    <updated>2019-03-18T04:26:56.383Z</updated>
    
    <content type="html"><![CDATA[<h2 id="进阶管理hexo博客"><a href="#进阶管理hexo博客" class="headerlink" title="进阶管理hexo博客"></a>进阶管理hexo博客</h2><p>这几天，重新安装windows系统，好多东西都要重新来过，太麻烦了，所以网上查找了一些解决方案并记录下来</p><h3 id="解决方案："><a href="#解决方案：" class="headerlink" title="解决方案："></a>解决方案：</h3><ol><li>在你的github上新建一个repository，然后把你的blog文件夹上传，进行备份，这个比较简单</li><li>在现有的shuisuinian.guthub.io的repository下创建一个分支来管理，具体操作步骤如下：</li></ol><hr><a id="more"></a><h3 id="具体操作："><a href="#具体操作：" class="headerlink" title="具体操作："></a>具体操作：</h3><ul><li><p>按本地磁盘（任意位置下，右键打开Git bash,将你的项目文件克隆到本地：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone git@github.com:shuisuinian/shuisuinian.github.io.git</span><br></pre></td></tr></table></figure></li><li><p>这时该目录下出现一个shuisuinian.github.io的文件夹，进入该文件夹，删除文件夹中除了.git的其他所有文件夹</p></li><li>把你的blog文件夹内的所有文件全部复制到shuisuinian.github.io/下</li><li>此时，应有一个名.gitignore的文件，如果没有则自己创建，内容如下：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">.DS_Store</span><br><span class="line">Thumbs.db</span><br><span class="line">db.json</span><br><span class="line">*.log</span><br><span class="line">node_modules/</span><br><span class="line">public/</span><br><span class="line">.deploy*/</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>说明：.gitignore文件就是为了指定哪些文件上传的时候可以忽略，因为blog/的文件并不全部都需要</p></blockquote><ul><li><p>用git命令创建一个叫hexo（任意命名）的分支，并切换到此分支：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b hexo</span><br></pre></td></tr></table></figure></li><li><p>以此输入以下命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add --all</span><br><span class="line">git commit -m &quot;注释&quot;</span><br><span class="line">git push --set-upstream origin hexo</span><br></pre></td></tr></table></figure></li></ul><h3 id="后续：发表更新博客及源文件"><a href="#后续：发表更新博客及源文件" class="headerlink" title="后续：发表更新博客及源文件"></a>后续：发表更新博客及源文件</h3><ul><li><p>git 提交三部曲</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// 更新源文件</span><br><span class="line">git add . #添加所有文件到暂存区</span><br><span class="line">git commit -m &quot;提交一篇博客&quot;  #提交</span><br><span class="line">git push origin hexo 推送hexo分支到github</span><br><span class="line">// 更新博客</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure></li><li><p>利用hexo把本地文章部署到了网站上，网站更新==shuisuinian.github.io下的master分支更新==blog/public/下文件更新，然后通过git三部曲把本地变更过的blog文件也备份到了shuisuinian.github.io下的hexo分支</p></li></ul><h3 id="今后换电脑或者重装系统后，安装基本软件环境后，cnpm安装依赖"><a href="#今后换电脑或者重装系统后，安装基本软件环境后，cnpm安装依赖" class="headerlink" title="今后换电脑或者重装系统后，安装基本软件环境后，cnpm安装依赖"></a>今后换电脑或者重装系统后，安装基本软件环境后，cnpm安装依赖</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone -b hexo git@github.com:shuisuinian/shuisuinian.github.io.git</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;进阶管理hexo博客&quot;&gt;&lt;a href=&quot;#进阶管理hexo博客&quot; class=&quot;headerlink&quot; title=&quot;进阶管理hexo博客&quot;&gt;&lt;/a&gt;进阶管理hexo博客&lt;/h2&gt;&lt;p&gt;这几天，重新安装windows系统，好多东西都要重新来过，太麻烦了，所以网上查找了一些解决方案并记录下来&lt;/p&gt;
&lt;h3 id=&quot;解决方案：&quot;&gt;&lt;a href=&quot;#解决方案：&quot; class=&quot;headerlink&quot; title=&quot;解决方案：&quot;&gt;&lt;/a&gt;解决方案：&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;在你的github上新建一个repository，然后把你的blog文件夹上传，进行备份，这个比较简单&lt;/li&gt;
&lt;li&gt;在现有的shuisuinian.guthub.io的repository下创建一个分支来管理，具体操作步骤如下：&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
    
    </summary>
    
      <category term="hexo" scheme="https://shuisuinian.coding.me/categories/hexo/"/>
    
    
      <category term="hexo博客" scheme="https://shuisuinian.coding.me/tags/hexo%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://shuisuinian.coding.me/archives/1243066710.html"/>
    <id>https://shuisuinian.coding.me/archives/1243066710.html</id>
    <published>2019-03-16T04:59:44.155Z</published>
    <updated>2019-03-18T04:26:56.376Z</updated>
    
    <content type="html"><![CDATA[<h2 id="欢迎进入wyf’s-blog"><a href="#欢迎进入wyf’s-blog" class="headerlink" title="欢迎进入wyf’s blog"></a>欢迎进入wyf’s blog</h2><p>Welcome to <a href="https://shuisuinian.coding.me/">wyf-Hexo-coding pages</a>!<br>Welcome to <a href="https://shuisuinian.github.io/" target="_blank" rel="noopener">wyf-Hexo-github pages</a>!</p><hr><a id="more"></a><h4 id="之后是第一次搭建hexo时自动创建"><a href="#之后是第一次搭建hexo时自动创建" class="headerlink" title="之后是第一次搭建hexo时自动创建"></a>之后是第一次搭建hexo时自动创建</h4><h2 id="hello-world"><a href="#hello-world" class="headerlink" title="hello world"></a>hello world</h2><p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;欢迎进入wyf’s-blog&quot;&gt;&lt;a href=&quot;#欢迎进入wyf’s-blog&quot; class=&quot;headerlink&quot; title=&quot;欢迎进入wyf’s blog&quot;&gt;&lt;/a&gt;欢迎进入wyf’s blog&lt;/h2&gt;&lt;p&gt;Welcome to &lt;a href=&quot;https://shuisuinian.coding.me/&quot;&gt;wyf-Hexo-coding pages&lt;/a&gt;!&lt;br&gt;Welcome to &lt;a href=&quot;https://shuisuinian.github.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;wyf-Hexo-github pages&lt;/a&gt;!&lt;/p&gt;
&lt;hr&gt;
    
    </summary>
    
      <category term="Hello World" scheme="https://shuisuinian.coding.me/categories/Hello-World/"/>
    
    
      <category term="Hello World" scheme="https://shuisuinian.coding.me/tags/Hello-World/"/>
    
  </entry>
  
  <entry>
    <title>单例设计模式</title>
    <link href="https://shuisuinian.coding.me/archives/3442686983.html"/>
    <id>https://shuisuinian.coding.me/archives/3442686983.html</id>
    <published>2019-03-09T16:12:11.000Z</published>
    <updated>2019-03-18T04:26:56.384Z</updated>
    
    <content type="html"><![CDATA[<h4 id="单例设计模式"><a href="#单例设计模式" class="headerlink" title="单例设计模式"></a>单例设计模式</h4><p>必须对于多个程序使用同一个配置信息对象时，就需要保证该对象的唯一性。</p><hr> <a id="more"></a><p> 1.如何保证对象的唯一性</p><ul><li>不允许该类创建一个本类实例</li><li>对该类创建一个本类实例</li><li><p>对外提供一个方法让其他程序可以获取该对象</p><p>2.步骤：</p><ul><li>私有化该类构造函数</li><li>通过new在本类中创建一个本类对象</li><li>定义一个公有的方法，将创建的对象返回</li></ul><hr></li></ul><p>3.例如：新建一个测试类<br>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">class Test&#123;</span><br><span class="line">    private int num;</span><br><span class="line">    </span><br><span class="line">    private static Test t = new Test();   //通过new在本类中创建一个本类对象</span><br><span class="line">    private Test()&#123;&#125;                                 //私有化构造函数</span><br><span class="line">    public static Test getInstance()&#123;     //定义一个公有的方法，将创建的对象返回</span><br><span class="line">        return t;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    public void setNum(int num)&#123;</span><br><span class="line">        this.num = num;</span><br><span class="line">    &#125;</span><br><span class="line">    public int getNum()&#123;</span><br><span class="line">        return num;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>如果在main中直接new两个对象</p><ul><li><p>方式1</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">class Demo&#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        Test t1 = new Test();</span><br><span class="line">        Test t2 = new Test();</span><br><span class="line">        t1.setNum(10);</span><br><span class="line">        t2.setNum(20);</span><br><span class="line">        System.out.println(t1.getNum());</span><br><span class="line">        System.out.println(t2.getNum());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">10</span><br><span class="line">20</span><br></pre></td></tr></table></figure><p>未达到内存中只有一个对象的要求</p><ul><li>方式2<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">class Demo&#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        Test t1 = Test.getInstance();</span><br><span class="line">        Test t2 = Test.getInstance();</span><br><span class="line">        t1.setNum(10);</span><br><span class="line">        t2.setNum(20);</span><br><span class="line">        System.out.println(t1.getNum());</span><br><span class="line">        System.out.println(t2.getNum());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>输出结果为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">20</span><br><span class="line">20</span><br></pre></td></tr></table></figure><p>利用此方法t1 t2操作的时同一个对象吗，所以满足内存了中只有一个对象的要求</p><hr></li></ul><p>4.饿汉式 （开发时常用）<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> class Single &#123; // 类一加载，对象就已经存在了</span><br><span class="line"> </span><br><span class="line">    private Static Single s = new Single();</span><br><span class="line">    </span><br><span class="line">    private Single()&#123;&#125;</span><br><span class="line">    </span><br><span class="line">    public static Single getInstance()&#123;</span><br><span class="line">        return s;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>5.懒汉式 (面试时较前者更常问)<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"> class Single2 &#123; // 类加载进来，没有对象，只有调用了getInstance方法时，才会创建对象</span><br><span class="line"> //延迟加载形式</span><br><span class="line"> </span><br><span class="line">    private Static Single2 s = null;</span><br><span class="line">    </span><br><span class="line">    private Single2()&#123;&#125;</span><br><span class="line">    </span><br><span class="line">    public static Single2 getInstance()&#123;</span><br><span class="line">        if(s==null)</span><br><span class="line">            s = new Single2();</span><br><span class="line">        return s;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;单例设计模式&quot;&gt;&lt;a href=&quot;#单例设计模式&quot; class=&quot;headerlink&quot; title=&quot;单例设计模式&quot;&gt;&lt;/a&gt;单例设计模式&lt;/h4&gt;&lt;p&gt;必须对于多个程序使用同一个配置信息对象时，就需要保证该对象的唯一性。&lt;/p&gt;
&lt;hr&gt;
    
    </summary>
    
      <category term="java" scheme="https://shuisuinian.coding.me/categories/java/"/>
    
    
      <category term="javase" scheme="https://shuisuinian.coding.me/tags/javase/"/>
    
      <category term="设计模式" scheme="https://shuisuinian.coding.me/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>hexo创建</title>
    <link href="https://shuisuinian.coding.me/archives/469202525.html"/>
    <id>https://shuisuinian.coding.me/archives/469202525.html</id>
    <published>2019-03-09T01:01:00.000Z</published>
    <updated>2019-03-19T01:03:05.475Z</updated>
    
    <content type="html"><![CDATA[<h2 id="hexo-静态博客"><a href="#hexo-静态博客" class="headerlink" title="hexo 静态博客"></a>hexo 静态博客</h2><h4 id="1、-安装node-js"><a href="#1、-安装node-js" class="headerlink" title="1、 安装node.js"></a>1、 安装node.js</h4><p>直接在<a href="http://nodejs.cn/" target="_blank" rel="noopener">官网</a>下载 ，安装<br>首先验证是否安装成功<br>进入cmd（快捷键 win+R，输入cmd），或者git bash</p><hr><a id="more"></a><p><img src="https://i.loli.net/2019/03/19/5c90367ccd898.png" alt><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure></p><p><img src="https://i.loli.net/2019/03/19/5c903f67abd7a.png" alt><br>出现版本号XXX 就是安装没有问题（一般也不会出现问题的）</p><h4 id="2、更换源（改为淘宝源）"><a href="#2、更换源（改为淘宝源）" class="headerlink" title="2、更换源（改为淘宝源）"></a>2、更换源（改为淘宝源）</h4><blockquote><p>直接npm比较慢，所以安装cnpm，这样会快些<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure></p></blockquote><p>键入命令后回车<br><code>cnpm -v</code>  进行验证 ,和上面验证一个意思，就不截图了</p><h4 id="3、现在使用cnpm-来安装hexo博客框架"><a href="#3、现在使用cnpm-来安装hexo博客框架" class="headerlink" title="3、现在使用cnpm 来安装hexo博客框架"></a>3、现在使用cnpm 来安装hexo博客框架</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install -g hexo-cli</span><br></pre></td></tr></table></figure><p><code>hexo -v</code>   进行验证</p><h4 id="4、新建一个文件夹blog进入该文件夹，再执行命令"><a href="#4、新建一个文件夹blog进入该文件夹，再执行命令" class="headerlink" title="4、新建一个文件夹blog进入该文件夹，再执行命令"></a>4、新建一个文件夹blog进入该文件夹，再执行命令</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir blog  //新建文件夹blog 文件夹名自己随意就好</span><br><span class="line">cd blog     //进入该文件夹</span><br><span class="line">hexo init   //在这个文件夹建立hexo博客</span><br></pre></td></tr></table></figure><p>等待一段时间安装 出现<code>Start blogging with Hwxo!</code>表示安装成功<br>之后就算出现什么问题，直接删掉这个文件夹，重来就好</p><blockquote><p>后面的操作都是在这个新建的blog目录下，就算出现什么问题，直接删掉这个文件夹，重来就好</p></blockquote><h4 id="5、启动博客"><a href="#5、启动博客" class="headerlink" title="5、启动博客"></a>5、启动博客</h4><p><code>hexo s</code><br><img src="https://i.loli.net/2019/03/19/5c903f67a0b8e.png" alt><br>浏览器进入 <code>localhost:4000</code> 发现有一个默认创建的文章<br>(我这里目录不一样，是在之后做了修改)</p><h4 id="6、新建博文"><a href="#6、新建博文" class="headerlink" title="6、新建博文"></a>6、新建博文</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo n &quot;我的第一篇hexo文章”</span><br></pre></td></tr></table></figure><p>可以发现在目录/blog/source/_psots文件夹下 多出一个<br>“我的第一篇hexo文章.md” 的文件，这里是markdown格式的，大家可以花个几分钟去学习一下语法，比较简单。</p><h4 id="7、部署到github上"><a href="#7、部署到github上" class="headerlink" title="7、部署到github上"></a>7、部署到github上</h4><p>在github里新建一个repostory命名  ！！！！<br>你的用户名.github.io<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 例如我的</span><br><span class="line">shuisuinian.github.io</span><br></pre></td></tr></table></figure></p><h4 id="8、安装插件，并修改-config-yml文件"><a href="#8、安装插件，并修改-config-yml文件" class="headerlink" title="8、安装插件，并修改_config.yml文件"></a>8、安装插件，并修改_config.yml文件</h4><p>还是 cmd 进入blog目录下<br><code>cnpm install --save hexo-deployer-git</code><br> 安装时有个 peerDependencies WARNING  不用管<br> 设置_config.yml 文件（这个文件就在blog根目录下的）<br> 找到这一段<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> # Deployment</span><br><span class="line">## Docs: https://hexo.io/docs/deployment.html</span><br></pre></td></tr></table></figure></p><p>修改：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> # Deployment</span><br><span class="line">## Docs: https://hexo.io/docs/deployment.html</span><br><span class="line">deploy:</span><br><span class="line"> type: git</span><br><span class="line"> repo: https://github.com/你的用户名/你的用户名.github.io.git</span><br><span class="line"> banch: master</span><br></pre></td></tr></table></figure></p><p> 设置完成后推送到github，依次执行<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure></p><blockquote><p>这里可能会出现的问题是：你以前安装完git，没有配置信息等一些问题，如果有问题，大家可以百度一下</p></blockquote><h4 id="9、更换主题"><a href="#9、更换主题" class="headerlink" title="9、更换主题"></a>9、更换主题</h4><p>  <code>git clone https://github.com/litten/hexo-theme-yilia.git. themes/yilia</code><br>  修改 之前的_config.yml<br>  找到  theme 这行 修改为<code>theme: yilia</code><br>  执行以下命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo s</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;hexo-静态博客&quot;&gt;&lt;a href=&quot;#hexo-静态博客&quot; class=&quot;headerlink&quot; title=&quot;hexo 静态博客&quot;&gt;&lt;/a&gt;hexo 静态博客&lt;/h2&gt;&lt;h4 id=&quot;1、-安装node-js&quot;&gt;&lt;a href=&quot;#1、-安装node-js&quot; class=&quot;headerlink&quot; title=&quot;1、 安装node.js&quot;&gt;&lt;/a&gt;1、 安装node.js&lt;/h4&gt;&lt;p&gt;直接在&lt;a href=&quot;http://nodejs.cn/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;官网&lt;/a&gt;下载 ，安装&lt;br&gt;首先验证是否安装成功&lt;br&gt;进入cmd（快捷键 win+R，输入cmd），或者git bash&lt;/p&gt;
&lt;hr&gt;
    
    </summary>
    
      <category term="hexo" scheme="https://shuisuinian.coding.me/categories/hexo/"/>
    
    
      <category term="hexo博客" scheme="https://shuisuinian.coding.me/tags/hexo%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
</feed>
